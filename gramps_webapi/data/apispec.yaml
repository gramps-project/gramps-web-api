swagger: "2.0"
info:
  title: "Gramps Web API"
  description: >
    The Gramps Web API is a REST API that provides access to family tree databases generated and maintained with Gramps, a popular Open Source genealogical research software package.

    * The Gramps Web API project is hosted at https://github.com/gramps-project/web-api

    * More about Gramps and the numerous features it provides for genealogists can be found at https://gramps-project.org
  version: "0.1.0"
  license:
    name: "GNU GPL v2.0"
    url: "http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

tags:
- name: authentication
  description: Access for presenting credentials.
- name: people
  description: Access to person objects.
- name: families
  description: Access to family objects.
- name: events
  description: Access to event objects.
- name: places
  description: Access to place objects.
- name: citations
  description: Access to citation objects.
- name: sources
  description: Access to source objects.
- name: repositories
  description: Access to repository objects.
- name: media
  description: Access to media objects.
- name: notes
  description: Access to note objects.
- name: tags
  description: Access to tag objects.
- name: types
  description: Access to default and custom types.
- name: name-groups
  description: Access to name group mappings.
- name: bookmarks
  description: Access to user bookmarks.
- name: filters
  description: Access to filter management.
- name: translations
  description: Access to translation service.
- name: relations
  description: Access to relationship calculator.
- name: metadata
  description: Access to tree and application metadata.

##############################################################################
# Endpoint definitions
##############################################################################

paths:

##############################################################################
# Endpoint - Login
##############################################################################

  /login:
    post:
      tags:
      - authentication
      summary: "Authenticate a user to obtain a pair of JWT access tokens."
      operationId: login
      consumes:
      - "multipart/form-data"
      parameters:
      - name: username
        in: formData
        required: true
        type: string
        description: "The user or account name."
      - name: password
        in: formData
        required: true
        type: string
        description: "The password for the user or account."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/JWTAccessTokens"
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."

##############################################################################
# Endpoint - Refresh
##############################################################################

  /refresh:
    post:
      tags:
      - authentication
      summary: "Fetch a fresh JWT access token."
      operationId: refreshToken
      security:
        - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: "The JWT refresh token."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/JWTRefreshToken"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."

##############################################################################
# Endpoint - People
##############################################################################

  /people:
    get:
      tags:
      - people
      summary: "Get information about multiple people."
      operationId: getPeople
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a person, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: profile
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates that the person profile should be included in the response. The person profile contains summarized information about the person and their familial relationships in a more readily consumable format."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the person should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of possible keys on which it will operate. For people the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            families | The list of family records
            media_list | The list of referenced media items
            note_list | The list of note records
            parent_families | The list of parent family records
            person_ref_list | The list of referenced person records
            primary_parent_family | The primary parent family record
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No people found."

  /people/{handle}:
    get:
      tags:
      - people
      summary: "Get information about a specific person."
      operationId: getPerson
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a person."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: profile
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates that the person profile should be included in the response. The person profile contains summarized information about the person and their familial relationships in a more readily consumable format."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the person should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a person the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            families | The list of family records
            media_list | The list of referenced media items
            note_list | The list of note records
            parent_families | The list of parent family records
            person_ref_list | The list of referenced person records
            primary_parent_family | The primary parent family record
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Person"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Person not found."

##############################################################################
# Endpoint - Families
##############################################################################

  /families:
    get:
      tags:
      - families
      summary: "Get information about multiple families."
      operationId: getFamilies
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a family, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: profile
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates that the family profile should be included in the response. The family profile contains summarized information about the family and their members in a more readily consumable format."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the family should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For families the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            child_ref_list | The list of referenced children records
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            father | The person record of the father
            media_list | The list of referenced media items
            mother | The person record of the mother
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Family"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No families found."

  /families/{handle}:
    get:
      tags:
      - families
      summary: "Get information about a specific family."
      operationId: getFamily
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a family."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates if keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: profile
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates that the family profile should be included in the response. The family profile contains summarized information about the family and their members in a more readily consumable format."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the family should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a family the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            child_ref_list | The list of referenced children records
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            father | The person record of the father
            media_list | The list of referenced media items
            mother | The person record of the mother
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Family"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Family not found."

##############################################################################
# Endpoint - Events
##############################################################################

  /events:
    get:
      tags:
      - events
      summary: "Get information about multiple events."
      operationId: getEvents
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for an event, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates if keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: profile
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates that the event profile should be included in the response. The event profile contains some brief information about the event in a more readily consumable format."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the event should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For events the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            place | The place record for the event
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No events found."

  /events/{handle}:
    get:
      tags:
      - events
      summary: "Get information about a specific event."
      operationId: getEvent
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 0
        description: "The unique identifier for an event."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: profile
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates that the event profile should be included in the response. The event profile contains some brief information about the event in a more readily consumable format."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the event should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For an event the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            place | The place record for the event
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Event"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Event not found."

##############################################################################
# Endpoint - Places
##############################################################################

  /places:
    get:
      tags:
      - places
      summary: "Get information about multiple places."
      operationId: getPlaces
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a place, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the place should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For places the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Place"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No places found."

  /places/{handle}:
    get:
      tags:
      - places
      summary: "Get information about a specific place."
      operationId: getPlace
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a place."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the place should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a list of comma delimited keys on which it will operate. For a place the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Place"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Place not found."

##############################################################################
# Endpoint - Citations
##############################################################################

  /citations:
    get:
      tags:
      - citations
      summary: "Get information about multiple citations."
      operationId: getCitations
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a citation, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the citation should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For citations the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            source | The source record cited from
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Citation"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No citations found."

  /citations/{handle}:
    get:
      tags:
      - citations
      summary: "Get information about a specific citation."
      operationId: getCitation
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a citation."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the citation should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a citation the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            source | The source record cited from
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Citation"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Citation not found."

##############################################################################
# Endpoint - Sources
##############################################################################

  /sources:
    get:
      tags:
      - sources
      summary: "Get information about multiple sources."
      operationId: getSources
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a source, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the source should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For sources the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            reporef_list | The list of referenced repository records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Source"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No sources found."

  /sources/{handle}:
    get:
      tags:
      - sources
      summary: "Get information about a specific source."
      operationId: getSource
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a source."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the source should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a source the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            reporef_list | The list of referenced repository records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Source"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Source not found."

##############################################################################
# Endpoint - Repositories
##############################################################################

  /repositories:
    get:
      tags:
      - repositories
      summary: "Get information about multiple repositories."
      operationId: getRepositories
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a repository, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the repository should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For repositories the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Repository"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No repositories found."

  /repositories/{handle}:
    get:
      tags:
      - repositories
      summary: "Get information about a specific repository."
      operationId: getRepository
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a repository."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the repository should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a repository the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Repository"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Repository not found."

##############################################################################
# Endpoint - Media
##############################################################################

  /media:
    get:
      tags:
      - media
      summary: "Get information about multiple media items."
      operationId: getMediaItems
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a media item, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the media item should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For media items the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Media"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No media items found."

  /media/{handle}:
    get:
      tags:
      - media
      summary: "Get information about a specific media item."
      operationId: getMediaItem
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a media item."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the media item should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a media item the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Media"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."

##############################################################################
# Endpoint - Notes
##############################################################################

  /notes:
    get:
      tags:
      - notes
      summary: "Get information about multiple notes."
      operationId: getNotes
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a note, usually but not guaranteed to be unique."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the note should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For notes the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Note"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No notes found."

  /notes/{handle}:
    get:
      tags:
      - notes
      summary: "Get information about a specific note."
      operationId: getNote
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a note."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        description: "Presence indicates that objects referring to the note should be included in the response."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a note the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Note"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Note not found."

##############################################################################
# Endpoint - Tags
##############################################################################

  /tags:
    get:
      tags:
      - tags
      summary: "Get information about multiple tags."
      operationId: getTags
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Tag"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No tags found."

  /tags/{handle}:
    get:
      tags:
      - tags
      summary: "Get information about a specific tag."
      operationId: getTag
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a tag."
      - name: strip
        in: query
        required: false
        type: string
        minLength: 0
        maxLength: 0
        description: "Presence indicates keys with empty values should be stripped out of the response."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Tag"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Tag not found."

##############################################################################
# Endpoint - Types
##############################################################################

  /types:
    get:
      tags:
      - types
      summary: "Get all available default and custom Gramps record types."
      operationId: getTypes
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            description: "All default and custom Gramps record types."
            type: object
            properties:
              custom:
                $ref: "#/definitions/CustomTypes"
              default:
                $ref: "#/definitions/DefaultTypes"
        401:
          description: "Unauthorized: Missing authorization header."

  /types/default:
    get:
      tags:
      - types
      summary: "Get all available Gramps default record types."
      operationId: getDefaultTypes
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/DefaultTypes"
        401:
          description: "Unauthorized: Missing authorization header."

  /types/default/{type}:
    get:
      tags:
      - types
      summary: "Get the list of values for a specific Gramps default record type."
      operationId: getDefaultType
      security:
        - Bearer: []
      parameters:
      - name: type
        in: path
        required: true
        type: string
        description: "The Gramps default record type."
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            description: "The list of values for a specific Gramps default record type."
            type: array
            items:
              type: string
            example:
              - Custom
              - Audio
              - Book
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Gramps default record type not found."

  /types/default/{type}/map:
    get:
      tags:
      - types
      summary: "Get the mapping for a specific Gramps default record type."
      operationId: getDefaultTypeMap
      security:
        - Bearer: []
      parameters:
      - name: type
        in: path
        required: true
        type: string
        description: "The Gramps default record type."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/DefaultTypeMap"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Gramps default record type not found."

  /types/custom:
    get:
      tags:
      - types
      summary: "Get all available Gramps custom record types."
      operationId: getCustomTypes
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/CustomTypes"
        401:
          description: "Unauthorized: Missing authorization header."

  /types/custom/{type}:
    get:
      tags:
      - types
      summary: "Get the list of values for a specific Gramps custom record type."
      operationId: getCustomType
      security:
        - Bearer: []
      parameters:
      - name: type
        in: path
        required: true
        type: string
        description: "The Gramps custom record type."
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            description: "The list of values for a specific Gramps custom record type."
            type: array
            items:
              type: string
            example:
              - Microfilm
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Gramps custom record type not found."

##############################################################################
# Endpoint - NameGroups
##############################################################################

  /name-groups:
    get:
      tags:
      - name-groups
      summary: "Get a list of name group mappings."
      operationId: getNameGroupMappings
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/NameGroupMapping"
        401:
          description: "Unauthorized: Missing authorization header."

  /name-groups/{surname}:
    get:
      tags:
      - name-groups
      summary: "Get name group mapping for a given surname."
      operationId: getNameGroupMapping
      security:
        - Bearer: []
      parameters:
      - name: surname
        in: path
        required: true
        type: string
        description: "The surname for which to get the grouping."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/NameGroupMapping"
        401:
          description: "Unauthorized: Missing authorization header."

  /name-groups/{surname}/{group}:
    post:
      tags:
      - name-groups
      summary: "Set name group mapping for a given surname."
      operationId: setNameGroupMapping
      security:
        - Bearer: []
      parameters:
      - name: surname
        in: path
        required: true
        type: string
        description: "The surname to set the mapping for."
      - name: group
        in: path
        required: true
        type: string
        description: "The group to map the surname to."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/NameGroupMapping"
        401:
          description: "Unauthorized: Missing authorization header."

##############################################################################
# Endpoint - Bookmarks
##############################################################################

  /bookmarks:
    get:
      tags:
      - bookmarks
      summary: "Get all bookmarks."
      operationId: getAllBookmarks
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Bookmarks"
        401:
          description: "Unauthorized: Missing authorization header."

  /bookmarks/{namespace}:
    get:
      tags:
      - bookmarks
      summary: "Get bookmarks for a given category."
      operationId: getBookmarks
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the bookmarks."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              type: string
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Bookmark type not found."

##############################################################################
# Endpoint - Filters
##############################################################################

  /filters/{namespace}:
    get:
      tags:
      - filters
      summary: "Get custom filters and rules for a given namespace or category."
      operationId: getFilters
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the filters."
      - name: rules
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific filter rules to be returned."
      - name: filters
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific custom filters to be returned."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: object
            properties:
              filters:
                type: array
                items:
                  $ref: "#/definitions/CustomFilter"
              rules:
                type: array
                items:
                  $ref: "#/definitions/FilterRuleDescription"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Namespace not found."

    post:
      tags:
      - filters
      summary: "Create a custom filter."
      operationId: createFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: filter
        in: body
        required: true
        description: "The custom filter to create."
        schema:
          $ref: "#/definitions/CustomFilter"
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."

    put:
      tags:
      - filters
      summary: "Update a custom filter."
      operationId: updateFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: filter
        in: body
        required: true
        description: "The custom filter to update."
        schema:
          $ref: "#/definitions/CustomFilter"
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."

  /filters/{namespace}/{name}:
    get:
      tags:
      - filters
      summary: "Get a custom filter for a given namespace or category."
      operationId: getFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: name
        in: path
        required: true
        type: string
        description: "The name of a custom filter."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/CustomFilter"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Namespace or filter not found."

    delete:
      tags:
      - filters
      summary: "Delete a custom filter in a given namespace or category."
      operationId: deleteFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: name
        in: path
        required: true
        type: string
        description: "The name of the custom filter."
      - name: force
        in: query
        required: false
        type: string
        description: "Force delete custom filter and all filters that depend upon it."
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."

##############################################################################
# Endpoint - Translations
##############################################################################

  /translations:
    get:
      tags:
      - translations
      summary: "Get information about available translations."
      operationId: getTranslations
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Translations"
        401:
          description: "Unauthorized: Missing authorization header."

  /translations/{isocode}:
    get:
      tags:
      - translations
      summary: "Get a translation in a specific language."
      operationId: getTranslation
      security:
        - Bearer: []
      parameters:
      - name: isocode
        in: path
        required: true
        type: string
        description: "The ISO language code or identifier."
      - name: strings
        in: query
        required: true
        type: string
        description: "The list of strings to be translated. These must be provided in JSON format."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Translation"
        401:
          description: "Unauthorized: Missing authorization header."

##############################################################################
# Endpoint - Relations
##############################################################################

  /relations/{handle1}/{handle2}:
    get:
      tags:
      - relations
      summary: "Get description of most direct relationship between two people if one exists."
      operationId: getRelation
      security:
        - Bearer: []
      parameters:
      - name: handle1
        in: path
        required: true
        type: string
        description: "The handle of the first person."
      - name: handle2
        in: path
        required: true
        type: string
        description: "The handle of the second person."
      - name: depth
        in: query
        required: false
        type: integer
        description: "Depth for the search, default is 15 generations."
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Indicates to return relationship string in current locale."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Relationship"
        401:
          description: "Unauthorized: Missing authorization header."

  /relations/{handle1}/{handle2}/all:
    get:
      tags:
      - relations
      summary: "Get descriptions for all possible relationships between two people if any exist."
      operationId: getRelations
      security:
        - Bearer: []
      parameters:
      - name: handle1
        in: path
        required: true
        type: string
        description: "The handle of the first person."
      - name: handle2
        in: path
        required: true
        type: string
        description: "The handle of the second person."
      - name: depth
        in: query
        required: false
        type: integer
        description: "Depth for the search, default is 15 generations."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Relationships"
        401:
          description: "Unauthorized: Missing authorization header."

##############################################################################
# Endpoint - Metadata
##############################################################################

  /metadata:
    get:
      tags:
      - metadata
      summary: "Get information about the application environment and state."
      operationId: getMetadata
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Metadata"
        401:
          description: "Unauthorized: Missing authorization header."

##############################################################################    
# Model definitions    
##############################################################################

definitions:

##############################################################################
# Model - Token
##############################################################################

  JWTAccessTokens:
    type: object
    properties:
      access_token:
        description: Access token
        type: string
      refresh_token:
        description: Refresh token
        type: string

  JWTRefreshToken:
    type: object
    properties:
      refresh_token:
        description: Refresh token
        type: string

##############################################################################
# Model - Date
##############################################################################

  Date:
    type: object
    properties:
      calendar:
        description: "The calendar format for the date."
        type: integer
        example: 0
      dateval:
        description: "The value for the date. A mixed array of integer and boolean types."
        type: array
        items:
          type: object
        example:
        - 1
        - 4
        - 1875
        - false
      format:
        description: "TODO: Is this part of the JSON schema?"
        type: string
        example: null
      modifier:
        description: "Modifier."
        type: integer
        example: 0
      newyear:
        description: "New year begins."
        type: integer
        example: 0
      quality:
        description: "Quality"
        type: integer
        example: 0
      sortval:
        description: "Value to use for date sorting."
        type: integer
        example: 2405980
      text:
        description: "Textual representation of the date."
        type: string
        example: ""
      year:
        description: "Year"
        type: integer
        example: 1875

##############################################################################
# Model - Name
##############################################################################

  Name:
    type: object
    properties:
      call:
        description: "Call name."
        type: string
        example: "Anderson"
      citation_list:
        description: "A list of handles for citations supporting the name."
        type: array
        items:
          type: string
        example:
          - "c140d56d19a1ced4c7a"
      date:
        description: "Date the name was in use."
        type: object
        items:
          $ref: "#/definitions/Date"
      display_as:
        description: "Identified for how to display the name."
        type: integer
        example: 0
      famnick:
        description: "Family nick name."
        type: string
        example: "Beauregard"
      first_name:
        description: "First part of name."
        type: string
        example: "Lewis Anderson"
      group_as:
        description: "For identifying how to group the name."
        type: string
        example: ""
      nick:
        description: "Nick name."
        type: string
        example: "Big Louie"
      note_list:
        description: "A list of handles for research notes about the name."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: true
      sort_as:
        description: "For identifying how to sort the name."
        type: integer
        example: 0
      suffix:
        description: "Suffix, usually denotes credentials."
        type: string
        example: "Sr"
      surname_list:
        description: "Surnames."
        type: array
        items:
          $ref: "#/definitions/Surname"
      title:
        description: "Prefix or title."
        type: string
        example: "Dr."
      type:
        description: "Type of name."
        type: string
        example: "Birth Name"

##############################################################################
# Model - Surname
##############################################################################

  Surname:
    type: object
    properties:
      connector:
        description: "Connector to tie given name and surname together."
        type: string
        example: ""
      origintype:
        description: "Name origin."
        type: string
        example: "Inherited"
      prefix:
        description: "A name prefix."
        type: string
        example: "von"
      primary:
        description: "Primary surname indicator."
        type: boolean
        example: false
      surname:
        description: "Actual surname."
        type: string
        example: "Zieliński"

##############################################################################
# Model - Attribute
##############################################################################

  Attribute:
    type: object
    properties:
      citation_list:
        description: "A list of handles for citations supporting the attribute."
        type: array
        items:
          type: string
        example:
          - "c140d5e5dbf300411bf"
      note_list:
        description: "A list of handles for research notes about the attribute."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: true
      type:
        description: "Type of the attribute."
        type: string
        example: "Social Security Number"
      value:
        description: "Value of the attribute."
        type: string
        example: "123-456-7890"

##############################################################################
# Model - Person
##############################################################################

  Person:
    type: object
    required:
      - handle
    properties:
      address_list:
        description: "A list of addresses for the person if available."
        type: array
        items:
          $ref: "#/definitions/Address"
      alternate_names:
        description: "A list of all the known names used by the person."
        type: array
        items:
          $ref: "#/definitions/Name"
      attribute_list:
        description: "A list of attributes about the person."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      birth_ref_index:
        description: "Indicates if a birth event is assigned to the person."
        type: integer
        example: 0
      change:
        description: "Time in epoch format the person record was last modified."
        type: number
        example: 1431174904
      citation_list:
        description: "A list of handles for citations supporting the person."
        type: array
        items:
          type: string
        example:
          - "c140d25efc045ab2ea5"
          - "c140d25efe703834da4"
          - "c140d53ab8b377b4174"
      death_ref_index:
        description: "Indicates if a death event is assigned to the person."
        type: integer
        example: 1
      event_ref_list:
        description: "A list of references to events the person participated in."
        type: array
        items:
          $ref: "#/definitions/EventReference"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/PersonExtended"
      family_list:
        description: "A list of handles for the families the person was a parent of."
        type: array
        items:
          type: string
        example:
          - "9OUJQCBOHW9UEK9CNV"
      gender:
        description: "Sex of the person."
        type: integer
        example: 1
      gramps_id:
        description: "An alternate user managed identifier for the person, usually but not guaranteed to be unique."
        type: string
        example: "I0044"
      handle:
        description: "The unique identifier for a person."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      lds_ord_list:
        description: "A list of LDS specific events the person participated in."
        type: array
        items:
          $ref: "#/definitions/LDSOrdination"
      media_list:
        description: "A list of references to media associated with the person."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the person."
        type: array
        items:
          type: string
        example:
          - "ac380498c020c7bcdc7"
          - "b39ff01f75c1f76859a"
          - "b39ff11d8912173cded"
          - "c140d4c29520c92055c"
      parent_family_list:
        description: "A list of handles for the families of the parents of the person."
        type: array
        items:
          type: string
        example:
          - "8OUJQCUVZ0XML7BQLF"
      person_ref_list:
        description: "A list of references to relationships the person had with other people."
        type: array
        items:
          $ref: "#/definitions/PersonReference"
      primary_name:
        description: "The primary name of the person."
        type: object
        items:
          $ref: "#/definitions/Name"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of some key events about the person and their familial relationships."
        type: object
        items:
          $ref: "#/definitions/PersonProfile"
      tag_list:
        description: "A list of handles to tags associated with the person."
        type: array
        items:
          type: string
        example:
          - "e9027bf39c27be945fab9df8124"
      urls:
        description: "A list of URLs associated with the person."
        type: array
        items:
          $ref: "#/definitions/URL"

##############################################################################
# Model - PersonExtended
##############################################################################

  PersonExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      events:
        description: "The event records for any referenced events."
        type: array
        items:
          $ref: "#/definitions/Event"
      families:
        description: "The family records for any referenced families."
        type: array
        items:
          $ref: "#/definitions/Family"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      parent_families:
        description: "The family records for any referenced parent families."
        type: array
        items:
          $ref: "#/definitions/Family"
      people:
        description: "The person records for any referenced persons."
        type: array
        items:
          $ref: "#/definitions/Person"
      primary_parent_family:
        description: "The family record for the primary parent family if referenced."
        type: object
        items:
          $ref: "#/definitions/Family"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - PersonProfile
##############################################################################

  PersonProfile:
    type: object
    properties:
      birth:
        description: "The birth event profile, or best fallback such as baptism, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      death:
        description: "The death event profile, or best fallback such as burial, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      events:
        description: "The event profiles for all the referenced events for the person."
        type: array
        items:
          $ref: "#/definitions/EventProfile"
      families:
        description: "The family profiles for families the person was a parent of."
        type: array
        items:
          $ref: "#/definitions/FamilyProfile"
      handle:
        description: "The unique identifier for a person."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      name_given:
        description: "Preferred given name of the person."
        type: string
        example: "Lewis Anderson"
      name_surname:
        description: "Preferred surname of the person."
        type: string
        example: "Garner von Zieliński"
      other_parent_families:
        description: "The family profiles for families of the parents of the person other than the primary parent family profile."
        type: array
        items:
          $ref: "#/definitions/FamilyProfile"
      primary_parent_family:
        description: "The family profile for the primary or preferred parents of the person."
        type: object
        items:
          $ref: "#/definitions/FamilyProfile"
      sex:
        description: "Simple identified for gender/sex of the person."
        type: string
        example: "M"

##############################################################################
# Model - PersonReference
##############################################################################

  PersonReference:
    type: object
    required:
      - ref
    properties:
      citation_list:
        description: "A list of handles for citations supporting the association."
        type: array
        items:
          type: string
        example:
          - "c140d694e647717b683"
      note_list:
        description: "A list of handles for research notes about the association."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the person referenced."
        type: string
        example: "VJFKQCFO7WESWPNKHE"
      rel:
        description: "The relationship between the two people."
        type: string
        example: "Godfather"

##############################################################################
# Model - Family
##############################################################################

  Family:
    type: object
    required:
      - handle
    properties:
      attribute_list:
        description: "A list of attributes about the family."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the family record was last modified."
        type: number
        example: 1328026883
      child_ref_list:
        description: "A list of references to children who were members of the family."
        type: array
        items:
          $ref: "#/definitions/ChildReference"
      citation_list:
        description: "A list of handles for citations supporting the family."
        type: array
        items:
          type: string
        example:
          - "c140d2876657c5a98f3"
          - "c140d934eba1ac92c35"
      event_ref_list:
        description: "A list of references to events the family participated in."
        type: array
        items:
          $ref: "#/definitions/EventReference"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/FamilyExtended"
      father_handle:
        description: "The unique identifier for the father of the family."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      gramps_id:
        description: "An alternate user managed identifier for the family, usually but not guaranteed to be unique."
        type: string
        example: "F0017"
      handle:
        description: "The unique identifier for a family."
        type: string
        example: "9OUJQCBOHW9UEK9CNV"
      lds_ord_list:
        description: "A list of LDS specific events the family participated in."
        type: array
        items:
          $ref: "#/definitions/LDSOrdination"
      media_list:
        description: "A list of references to media associated with the family."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      mother_handle:
        description: "The unique identifier for the mother of the family."
        type: string
        example: "FOUJQC7PMC15VC4P0I"
      note_list:
        description: "A list of handles for research notes related to the person."
        type: array
        items:
          type: string
        example:
          - "ac3804a1d747a39822c"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of the members of a family as well as some key events."
        type: object
        items:
          $ref: "#/definitions/FamilyProfile"
      tag_list:
        description: "A list of handles to tags associated with the family."
        type: array
        items:
          type: string
        example:
          - "bb80c2b235b0a1b3f49"
      type:
        description: "The type of relationship between the parents of family."
        type: string
        example: "Married"

##############################################################################
# Model - FamilyExtended
##############################################################################

  FamilyExtended:
    type: object
    properties:
      children:
        description: "The person records for any referenced children."
        type: array
        items:
          $ref: "#/definitions/Person"
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      events:
        description: "The event records for any referenced events."
        type: array
        items:
          $ref: "#/definitions/Event"
      father:
        description: "The person record for the father if known."
        type: object
        items:
          $ref: "#/definitions/Person"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      mother:
        description: "The person record for the mother if known."
        type: object
        items:
          $ref: "#/definitions/Person"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - FamilyProfile
##############################################################################

  FamilyProfile:
    type: object
    properties:
      children:
        description: "The person profiles for any children in the family."
        type: array
        items:
          $ref: "#/definitions/PersonProfile"
      divorce:
        description: "The divorce event profile, or best fallback such as annulment, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      events:
        description: "The event profiles for all the referenced events for the family."
        type: array
        items:
          $ref: "#/definitions/EventProfile"
      father:
        description: "The person profile for the father of the family."
        type: object
        items:
          $ref: "#/definitions/PersonProfile"
      handle:
        description: "The unique identifier for a family."
        type: string
        example: "9OUJQCBOHW9UEK9CNV"
      marriage:
        description: "The marriage event profile, or best fallback such as marriage license, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      mother:
        description: "The person profile for the mother of the family."
        type: object
        items:
          $ref: "#/definitions/PersonProfile"
      relationship:
        description: "The relationship between the parents of the family."
        type: string
        example: "Married"

##############################################################################
# Model - ChildReference
##############################################################################

  ChildReference:
    type: object
    required:
      - ref
    properties:
      citation_list:
        description: "A list of handles for citations supporting the reference to the child in the family."
        type: array
        items:
          type: string
        example:
          - "e9027bf39c36d6cdd046748852e"
      frel:
        description: "Relationship between the child and father."
        type: string
        example: "Birth"
      mrel:
        description: "Relationship between the child and mother."
        type: string
        example: "Birth"
      note_list:
        description: "A list of handles for research notes about the membership of the child in the family."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the child referenced."
        type: string
        example: "DPUJQCUYKKDPT78JJV"

##############################################################################
# Model - Event
##############################################################################

  Event:
    type: object
    required:
      - handle
    properties:
      attribute_list:
        description: "A list of attributes about the event."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the event record was last modified."
        type: number
        example: 1284030610
      citation_list:
        description: "A list of handles for citations supporting the event."
        type: array
        items:
          type: string
        example:
          - ""
      date:
        description: "The date of the event."
        type: object
        items:
          $ref: "#/definitions/Date"
      description:
        description: "A description for the event."
        type: string
        example: "Burial of Garner, Lewis Anderson"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/EventExtended"
      gramps_id:
        description: "An alternate user managed identifier for the event, usually but not guaranteed to be unique."
        type: string
        example: "E01658"
      handle:
        description: "The unique identifier for an event."
        type: string
        example: "a5af0ecb12e29af8a5d"
      media_list:
        description: "A list of references to media associated with the event."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the event."
        type: array
        items:
          type: string
        example:
          - ""
      place:
        description: "The handle to the place record for where the event occurred."
        type: string
        example: "YNUJQC8YM5EGRG868J"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of the key attributes for the event."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      tag_list:
        description: "A list of handles to tags associated with the event."
        type: array
        items:
          type: string
        example:
          - ""
      type:
        description: "The type of event."
        type: string
        example: "Burial"

##############################################################################
# Model - EventExtended
##############################################################################

  EventExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      place:
        description: "The place record if a place was referenced."
        type: object
        items:
          $ref: "#/definitions/Place"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - EventProfile
##############################################################################

  EventProfile:
    type: object
    properties:
      date:
        description: "Date of the event."
        type: string
        example: "1855-06-21"
      place:
        description: "Place of the event."
        type: string
        example: "Great Falls, MT, USA"
      type:
        description: "Type of the event."
        type: string
        example: "Birth"

##############################################################################
# Model - EventReference
##############################################################################

  EventReference:
    type: object
    required:
      - ref
    properties:
      attribute_list:
        description: "A list of attributes related to the role of the person in the event."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      note_list:
        description: "A list of handles for research notes about the event."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the event referenced."
        type: string
        example: "a5af0ecb12e29af8a5d"
      role:
        description: "Role of the person in the event."
        type: string
        example: "Primary"

##############################################################################
# Model - LDSOrdination
##############################################################################

  LDSOrdination:
    type: object
    properties:
      citation_list:
        description: "A list of handles for citations supporting the LDS event."
        type: array
        items:
          type: string
        example:
          - "c140d73a2ca52f37800"
      date:
        description: "Date of the event."
        type: object
        items:
          $ref: "#/definitions/Date"
      famc:
        description: "Family."
        type: string
        example: "8OUJQCUVZ0XML7BQLF"
      note_list:
        description: "A list of handles for research notes about the LDS event."
        type: array
        items:
          type: string
        example:
          - ""
      place:
        description: "Handle to location of the event."
        type: string
        example: "WTAKQCGG8L8LYZCSBB"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      status:
        description: "Status of the event."
        type: integer
        example: 13
      temple:
        description: "Temple the event was held at."
        type: string
        example: "ADELA"
      type:
        description: "Type of the event."
        type: integer
        example: 2

##############################################################################
# Model - Place
##############################################################################

  Place:
    type: object
    required:
      - handle
    properties:
      alt_loc:
        description: "Alternate locations for the place."
        type: array
        items:
          $ref: "#/definitions/Location"
      alt_names:
        description: "Alternate names for the place."
        type: array
        items:
          $ref: "#/definitions/PlaceName"
      change:
        description: "Time in epoch format the event place was last modified."
        type: number
        example: 1328027392
      citation_list:
        description: "A list of handles for citations supporting the place."
        type: array
        items:
          type: string
        example:
          - "c140df00ffa3ee017da"
      code:
        description: "Code."
        type: string
        example: ""
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/PlaceExtended"
      gramps_id:
        description: "An alternate user managed identifier for the place, usually but not guaranteed to be unique."
        type: string
        example: "P1678"
      handle:
        description: "The unique identifier for the place."
        type: string
        example: "YNUJQC8YM5EGRG868J"
      lat:
        description: "Latitude."
        type: string
        example: "42.5629668"
      long:
        description: "Longitude."
        type: string
        example: "-114.4608711"
      media_list:
        description: "A list of references to media associated with the person."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      name:
        description: "The place name."
        type: object
        items:
          $ref: "#/definitions/PlaceName"
      note_list:
        description: "A list of handles for research notes related to the person."
        type: array
        items:
          type: string
        example:
          - ""
      place_type:
        description: "The place type."
        type: string
        example: "City"
      place_ref_list:
        description: "A list of references to other places."
        type: array
        items:
          $ref: "#/definitions/PlaceReference"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      tag_list:
        description: "A list of handles to tags associated with the place."
        type: array
        items:
          type: string
        example:
          - ""
      title:
        description: "The full name of the place."
        type: string
        example: "Twin Falls, ID"
      urls:
        description: "A list of URLs associated with the place."
        type: array
        items:
          $ref: "#/definitions/URL"

##############################################################################
# Model - PlaceExtended
##############################################################################

  PlaceExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - PlaceName
##############################################################################

  PlaceName:
    type: object
    properties:
      date:
        description: "Date the place name was in use."
        type: object
        items:
          $ref: "#/definitions/Date"
      lang:
        description: "Language the name is in."
        type: string
        example: ""
      value:
        description: "The name in use."
        type: string
        example: "Twin Falls"

##############################################################################
# Model - PlaceReference
##############################################################################

  PlaceReference:
    type: object
    required:
      - ref
    properties:
      date:
        description: "Date of the reference."
        type: object
        items:
          $ref: "#/definitions/Date"
      ref:
        description: "Handle of the referenced place."
        type: string
        example: "c965872719e5db6bfe5fc47b033"

##############################################################################
# Model - Address
##############################################################################

  Address:
    type: object
    properties:
      citation_list:
        description: "A list of handles for citations supporting the address."
        type: array
        items:
          type: string
        example:
          - "c140d5aa362797c32d4"
      city:
        description: "City."
        type: string
        example: "Washington DC"
      country:
        description: "Country."
        type: string
        example: "USA"
      county:
        description: "County."
        type: string
        example: ""
      date:
        description: "Date resident at the address."
        type: object
        items:
          $ref: "#/definitions/Date"
      locality:
        description: "Locality."
        type: string
        example: ""
      note_list:
        description: "A list of handles for research notes about the address."
        type: array
        items:
          type: string
        example:
          - ""
      phone:
        description: "Phone number."
        type: string
        example: ""
      postal:
        description: "Postal code."
        type: string
        example: ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      state:
        description: "State."
        type: string
        example: "District of Columbia"
      street:
        description: "Street."
        type: string
        example: "1600 Pennsylvania Ave."

##############################################################################
# Model - Location
##############################################################################

  Location:
    type: object
    properties:
      city:
        description: "City."
        type: string
        example: "Washington DC"
      country:
        description: "Country."
        type: string
        example: "USA"
      county:
        description: "County."
        type: string
        example: ""
      locality:
        description: "Locality."
        type: string
        example: ""
      parish:
        description: "Parish."
        type: string
        example: ""
      phone:
        description: "Phone number."
        type: string
        example: ""
      postal:
        description: "Postal code."
        type: string
        example: ""
      state:
        description: "State."
        type: string
        example: "District of Columbia"
      street:
        description: "Street."
        type: string
        example: "1600 Pennsylvania Avenue"

##############################################################################
# Model - Citation
##############################################################################

  Citation:
    type: object
    required:
      - handle
      - source_handle
    properties:
      attribute_list:
        description: "A list of attributes about the citation."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the citation record was last modified."
        type: number
        example: 1328025946
      confidence:
        description: "Indicator of the confidence in the information being cited."
        type: integer
        example: 3
      date:
        description: "The date of the citation."
        type: object
        items:
          $ref: "#/definitions/Date"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/CitationExtended"
      gramps_id:
        description: "An alternate user managed identifier for the citation, usually but not guaranteed to be unique."
        type: string
        example: "C0975"
      handle:
        description: "The unique identifier for the citation."
        type: string
        example: "c140d25efe703834da4"
      media_list:
        description: "A list of references to media associated with the citation."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the citation."
        type: array
        items:
          type: string
        example:
          - ""
      page:
        description: "The page in the source material being cited."
        type: string
        example: ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      source_handle:
        description: "The handle to the source record being cited from."
        type: string
        example: "b39fe3f390e30bd2b99"
      tag_list:
        description: "A list of handles to tags associated with the citation."
        type: array
        items:
          type: string
        example:
          - ""

##############################################################################
# Model - CitationExtended
##############################################################################

  CitationExtended:
    type: object
    properties:
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      source:
        description: "The source record for the citation."
        type: object
        items:
          $ref: "#/definitions/Source"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - Source
##############################################################################

  Source:
    type: object
    required:
      - handle
    properties:
      abbrev:
        description: "An abbreviated name for the source."
        type: string
        example: "BR-GFC 1850"
      attribute_list:
        description: "A list of attributes about the source."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      author:
        description: "The author of the source."
        type: string
        example: "Priests of Great Falls Church 1850 - 1867"
      change:
        description: "Time in epoch format the source record was last modified."
        type: number
        example: 1234371690
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/SourceExtended"
      gramps_id:
        description: "An alternate user managed identifier for the source, usually but not guaranteed to be unique."
        type: string
        example: "S0000"
      handle:
        description: "The unique identifier for the source."
        type: string
        example: "b39fe3f390e30bd2b99"
      media_list:
        description: "A list of references to media associated with the source."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the source."
        type: array
        items:
          type: string
        example:
          - "b39feb55e1173f4a699"
          - "b39fedb8a051544689c"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      pubinfo:
        description: "Publication information."
        type: string
        example: "Microfilm Public Library Great Falls"
      reporef_list:
        description: "A list of references to repositories the source can be found in."
        type: array
        items:
          $ref: "#/definitions/RepositoryReference"
      tag_list:
        description: "A list of handles to tags associated with the source."
        type: array
        items:
          type: string
        example:
          - ""
      title:
        description: "Title for the source."
        type: string
        example: "Baptize registry 1850 - 1867 Great Falls Church"

##############################################################################
# Model - SourceExtended
##############################################################################

  SourceExtended:
    type: object
    properties:
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      repositories:
        description: "The repository records for any referenced repositories."
        type: array
        items:
          $ref: "#/definitions/Repository"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - Repository
##############################################################################

  Repository:
    type: object
    required:
      - handle
    properties:
      address_list:
        description: "A list of addresses for the repository if available."
        type: array
        items:
          $ref: "#/definitions/Address"
      change:
        description: "Time in epoch format the repository record was last modified."
        type: number
        example: 1234370614
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/RepositoryExtended"
      gramps_id:
        description: "An alternate user managed identifier for the repository, usually but not guaranteed to be unique."
        type: string
        example: "R0000"
      handle:
        description: "The unique identifier for the repository."
        type: string
        example: "b39fe38593f3f8c4f12"
      name:
        description: "Name of the repository."
        type: string
        example: "Public Library Great Falls"
      note_list:
        description: "A list of handles for research notes related to the repository."
        type: array
        items:
          type: string
        example:
          - "b39fe2e143d1e599450"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      tag_list:
        description: "A list of handles to tags associated with the repository."
        type: array
        items:
          type: string
        example:
          - ""
      type:
        description: "The type of repository."
        type: string
        example: "Library"
      urls:
        description: "A list of URLs associated with the repository."
        type: array
        items:
          $ref: "#/definitions/URL"

##############################################################################
# Model - RepositoryExtended
##############################################################################

  RepositoryExtended:
    type: object
    properties:
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - RepositoryReference
##############################################################################

  RepositoryReference:
    type: object
    required:
      - ref
    properties:
      call_number:
        description: "Call number for the source at the repository."
        type: string
        example: "32Z-345"
      media_type:
        description: "The media source format at the repository."
        type: string
        example: "Microfilm"
      note_list:
        description: "A list of handles for research notes related to the source at the repository."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the repository referenced."
        type: string
        example: "b39fe38593f3f8c4f12"

##############################################################################
# Model - Media
##############################################################################

  Media:
    type: object
    required:
      - handle
    properties:
      attribute_list:
        description: "A list of attributes about the media object."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the media object record was last modified."
        type: number
        example: 1328027158
      checksum:
        description: "A checksum for the media object for integrity validation."
        type: string
        example: "542c7ed6f97c6af16907339439abffdf"
      citation_list:
        description: "A list of handles for citations supporting the media object."
        type: array
        items:
          type: string
        example:
          - "c140dd5edc11679f39b"
      date:
        description: "The date associated with the media object."
        type: object
        items:
          $ref: "#/definitions/Date"
      desc:
        description: "A description of the contents of the media object."
        type: string
        example: "654px-Aksel_Andersson"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/MediaExtended"
      gramps_id:
        description: "An alternate user managed identifier for the media object, usually but not guaranteed to be unique."
        type: string
        example: "O0008"
      handle:
        description: "The unique identifier for the media object."
        type: string
        example: "B1AUFQV7H8R9NR4SZM"
      mime:
        description: "The format of the media object."
        type: string
        example: "image/jpeg"
      note_list:
        description: "A list of handles for research notes related to the media object."
        type: array
        items:
          type: string
        example:
          - ""
      path:
        description: "The path to locate and load the media object from storage."
        type: string
        example: "654px-Aksel_Andersson.jpg"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      tag_list:
        description: "A list of handles to tags associated with the media object."
        type: array
        items:
          type: string
        example:
          - ""

##############################################################################
# Model - MediaExtended
##############################################################################

  MediaExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - MediaReference
##############################################################################

  MediaReference:
    type: object
    required:
      - ref
    properties:
      attribute_list:
        description: "A list of attributes related to the media reference."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      citation_list:
        description: "A list of handles for citations supporting the media reference."
        type: array
        items:
          type: string
        example:
          - "c140d6cb9fe7fc1d3cc"
      note_list:
        description: "A list of handles for research notes about the media reference."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      rect:
        description: "Rectangle."
        type: array
        items:
          type: number
        example: [10, 20, 30, 40]
      ref:
        description: "The handle of the media referenced."
        type: string
        example: "B1AUFQV7H8R9NR4SZM"

##############################################################################
# Model - Note
##############################################################################

  Note:
    type: object
    required:
      - handle
    properties:
      change:
        description: "Time in epoch format the note record was last modified."
        type: number
        example: 1234371685
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        items:
          $ref: "#/definitions/NoteExtended"
      format:
        description: "Identifier for the note format."
        type: integer
        example: 1
      gramps_id:
        description: "An alternate user managed identifier for the note, usually but not guaranteed to be unique."
        type: string
        example: "N0010"
      handle:
        description: "The unique identifier for the note."
        type: string
        example: "b39feb55e1173f4a699"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      tag_list:
        description: "A list of handles to tags associated with the note."
        type: array
        items:
          type: string
        example:
          - ""
      text:
        description: "The note text."
        type: object
        items:
          $ref: "#/definitions/StyledText"
      type:
        description: "The type of note."
        type: string
        example: "Source text"

##############################################################################
# Model - NoteExtended
##############################################################################

  NoteExtended:
    type: object
    properties:
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - StyledText
##############################################################################

  StyledText:
    type: object
    properties:
      string:
        description: "The text itself."
        type: string
        example: "1855-06-25\n\n    line 1    fac secunda Junij Baptiza- \n    line 2    tus est Lewis Anderson\n    line 3    filius legitimus Guillielmus \n    line 4    Garner et Elisabetha  \n    line 5    Becks. Susceptores fuerent \n    line 6    petrus Arts et Catharina \n    line 7    van de Voorde"
      tags:
        description: "The text tags."
        type: array
        items:
          $ref: "#/definitions/StyledTextTag"

##############################################################################
# Model - StyledTextTag
##############################################################################

  StyledTextTag:
    type: object
    properties:
      name:
        description: "Name of the tag."
        type: string
        example: "Bold"
      value:
        description: "Value of the tag. Note type may be null, string, or integer."
        type: object
        example: "null"
      ranges:
        description: "Ranges."
        type: array
        items:
          type: integer
        example:
        - 0
        - 10

##############################################################################
# Model - Tag
##############################################################################

  Tag:
    type: object
    required:
      - handle
    properties:
      change:
        description: "Time in epoch format the tag record was last modified."
        type: number
        example: 1288512442
      color:
        description: "Color of the tag."
        type: string
        example: "#efb60c280c28"
      handle:
        description: "The unique identifier for the tag."
        type: string
        example: "bb80c2b235b0a1b3f49"
      name:
        description: "Tag name."
        type: string
        example: "ToDo"
      priority:
        description: "Priority of the tag."
        type: integer
        example: 0

##############################################################################
# Model - URL
##############################################################################

  URL:
    type: object
    properties:
      desc:
        description: "Description of the URL."
        type: string
        example: ""
      path:
        description: "URL"
        type: string
        example: "http://www.gramps-project.org/"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      type:
        description: "Type of URL."
        type: string
        example: "Web Home"

##############################################################################
# Model - FilterRuleDescription
##############################################################################

  FilterRuleDescription:
    type: object
    required:
       - labels
       - name
       - rule
    properties:
      category:
        description: "The filter rule category."
        type: string
        example: "General filters"
      description:
        description: "A description of the filter rule."
        type: string
        example: "Matches people with the particular tag"
      labels:
        description: "A list of field labels for filter rules that take parameters."
        type: array
        items:
          type: string
        example:
          - "Tag:"
      name:
        description: "A more concise rule description."
        type: string
        example: "People with the <tag>"
      rule:
        description: "The name of the filter rule."
        type: string
        example: "HasTag"

##############################################################################
# Model - FilterRule
##############################################################################

  FilterRule:
    type: object
    required:
      - name
    properties:
      name:
        description: "The name of the filter rule."
        type: string
        example: "HasTag"
      regex:
        description: "Indicator whether regular expressions used for text searches."
        type: boolean
        example: false
      values:
        description: "A list of values if the rule requires parameters."
        type: array
        items:
          type: object
        example:
          - "Tag:"

##############################################################################
# Model - CustomFilter
##############################################################################

  CustomFilter:
    type: object
    required:
      - function
      - invert
      - name
      - rules
    properties:
      comment:
        description: "A comment about purpose of the filter."
        type: string
        example: "All private males."
      function:
        description: "Logical operation to use in evaluating multiple rules. Must be 'and', 'or', 'xor' or 'one'"
        type: string
        example: "and"
      invert:
        description: "Indicator whether result set should be inverted."
        type: boolean
        example: false
      name:
        description: "The name of the custom filter."
        type: string
        example: "AllPrivateMales"
      rules:
        description: "The list of filter rules to apply as part of the filter."
        type: array
        items:
          $ref: "#/definitions/FilterRule"

##############################################################################
# Model - Translations
##############################################################################

  Translations:
    type: object
    required:
      - isocode
      - language
    properties:
      isocode:
        description: "The language code."
        type: string
        example: "fr"
      language:
        description: "The language name."
        type: string
        example: "French"

##############################################################################
# Model - Translation
##############################################################################

  Translation:
    type: object
    properties:
      original:
        description: "The original string."
        type: string
        example: "death"
      translation:
        description: "The translated string."
        type: string
        example: "décès"

##############################################################################
# Model - Relationship
##############################################################################

  Relationship:
    type: object
    properties:
      relationship_string:
        description: "Descriptive string describing the relationship."
        type: string
        example: "second great stepgrandaunt"
      distance_common_origin:
        description: "Number of generations to common ancestor, -1 if no common ancestor."
        type: integer
        example: 5
      distance_common_other:
        description: "Number of generations to other person in common, -1 if there is none."
        type: integer
        example: 1

  Relationships:
    type: array
    items:
      type: object
      properties:
        relationship_string:
          description: "Descriptive string describing the relationship."
          type: string
          example: "second great stepgrandaunt"
        common_ancestors:
          description: "List of handles of common ancestors."
          type: array
          items:
            type: string
          example:
          - 35WJQC1B7T7NPV8OLV
          - 46WJQCIOLQ0KOX2XCC

##############################################################################
# Model - Metadata
##############################################################################

  Metadata:
    type: object
    properties:
      database:
        description: "Information about the currently active database."
        type: object
        properties:
          id:
            description: "The database id."
            type: string
            example: "5f850009"
          module_version:
            description: "The database module version."
            type: string
            example: "2.6.0"
          name:
            description: "The database and also tree name."
            type: string
            example: "example_gramps"
          schema_version:
            description: "The data model schema version."
            type: string
            example: "18.0.0"
          type:
            description: "The database type."
            type: string
            example: "SQLite"
          version:
            description: "The database version."
            type: string
            example: "3.33.0"
      default_person:
        description: "The handle for the default person in the active database."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      gramps:
        description: "Information about the currently active Gramps instance."
        type: object
        properties:
          version: 
            description: "The version of the Gramps code."
            type: string
            example: "5.1.3"
      gramps_webapi:
        description: "Information about the currently active Gramps Web API instance."
        type: object
        properties:
          schema_version:
            description: "The version of the Gramps Web API schema."
            type: string
            example: "0.1.0"
          version:
            description: "The version of the Gramps Web API code."
            type: string
            example: "0.1-dev"
      locale:
        description: "The active locale."
        type: object
        properties:
          lang:
            description: "The language code."
            type: string
            example: "en_US"
      object_counts:
        $ref: "#/definitions/ObjectCounts"
      researcher:
        $ref: "#/definitions/Researcher"
      surnames:
        description: "A list of all surnames found in the database."
        type: array
        items:
          type: string
        example:
          - Abbott
          - Adams
          - Adkins 

##############################################################################
# Model - ObjectCounts
##############################################################################
    
  ObjectCounts:
    description: "Total numbers for primary object types in the database."
    type: object
    properties:
      citations:
        description: "The number of citations in the database."
        type: number
        example: 2854
      events:
        description: "The number of events in the database."
        type: number
        example: 3432
      families:
        description: "The number of families in the database."
        type: number
        example: 762
      media:
        description: "The number of media items in the database."
        type: number
        example: 7
      notes:
        description: "The number of notes in the database."
        type: number
        example: 19
      people:
        description: "The number of people in the database."
        type: number
        example: 2157
      places:
        description: "The number of places in the database."
        type: number
        example: 1294
      repositories:
        description: "The number of repositories in the database."
        type: number
        example: 3
      sources:
        description: "The number of sources in the database."
        type: number
        example: 4
      tags:
        description: "The number of tags in the database."
        type: number
        example: 2

##############################################################################
# Model - Researcher
##############################################################################
    
  Researcher:
    description: "Information about the primary researcher of the data."
    type: object
    properties:
      addr:
        description: "Address."
        type: string
        example: ""
      city:
        description: "City."
        type: string
        example: ""
      country:
        description: "Country."
        type: string
        example: ""
      county:
        description: "County."
        type: string
        example: ""
      email:
        description: "Email address."
        type: string
        example: ""
      locality:
        description: "Locality."
        type: string
        example: ""
      name:
        description: "Name of the researcher."
        type: string
        example: ""
      phone:
        description: "Phone number."
        type: string
        example: ""
      postal:
        description: "Postal code."
        type: string
        example: ""
      state:
        description: "State."
        type: string
        example: ""
      street:
        description: "Street."
        type: string
        example: ""

##############################################################################
# Model - Bookmarks
##############################################################################

  Bookmarks:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
    example:
      families:
        - 9OUJQCBOHW9UEK9CNV
      people:
        - AWFKQCJELLUWDY2PD3
        - 35WJQC1B7T7NPV8OLV
        - Q8HKQC3VMRM1M6M7ES

##############################################################################
# Model - NameGroupMapping
##############################################################################

  NameGroupMapping:
    type: object
    properties:
      surname:
        description: "Surname to be grouped."
        type: string
        example: Fernández
      group:
        description: "Surname to be grouped with."
        type: string
        example: Fernandez

##############################################################################
# Model - DefaultTypes
##############################################################################

  DefaultTypes:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
    example:
      gender_types:
        - Male
        - Female
        - Unknown
      source_media_types:
        - Audio
        - Book
        - Card

##############################################################################
# Model - DefaultTypeMap
##############################################################################

  DefaultTypeMap:
    type: object
    additionalProperties:
      type: string
    example:
      0: Custom
      1: Audio
      2: Book
      3: Card

##############################################################################
# Model - CustomTypes
##############################################################################

  CustomTypes:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
    example:
      source_attribute_types:
        - Creation date
        - Book Cover Type
        - Generated by
      source_media_types:
        - Microfilm


##############################################################################
# Model - Backlinks
##############################################################################

  Backlinks:
    type: object
    properties:
      person:
        description: "A list of handles of people referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      family:
        description: "A list of handles of families referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      event:
        description: "A list of handles of events referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      place:
        description: "A list of handles of places referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      source:
        description: "A list of handles of sources referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      citation:
        description: "A list of handles of citations referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      media:
        description: "A list of handles of media items referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"


##############################################################################
# Model - Backlinks extended
##############################################################################

  BacklinksExtended:
    type: object
    properties:
      person:
        description: "A list of handles of people referring to the object."
        type: array
        items:
          $ref: "#/definitions/Person"
      family:
        description: "A list of handles of families referring to the object."
        type: array
        items:
          $ref: "#/definitions/Family"
      event:
        description: "A list of handles of events referring to the object."
        type: array
        items:
          $ref: "#/definitions/Event"
      place:
        description: "A list of handles of places referring to the object."
        type: array
        items:
          $ref: "#/definitions/Place"
      source:
        description: "A list of handles of sources referring to the object."
        type: array
        items:
          $ref: "#/definitions/Source"
      citation:
        description: "A list of handles of citations referring to the object."
        type: array
        items:
          $ref: "#/definitions/Citation"
      media:
        description: "A list of handles of media items referring to the object."
        type: array
        items:
          $ref: "#/definitions/Media"
