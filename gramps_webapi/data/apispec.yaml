swagger: "2.0"
info:
  title: "Gramps Web API"
  version: "2.5.0"
  description: >
    The Gramps Web API is a REST API that provides access to family tree databases generated and maintained with Gramps, a popular Open Source genealogical research software package.

    * The Gramps Web API project and code are hosted at https://github.com/gramps-project/web-api


    * More about Gramps and the numerous features it provides for genealogists can be found at https://gramps-project.org
  license:
    name: "GNU Affero General Public License v3.0"
    url: "http://www.gnu.org/licenses/agpl-3.0.html"
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

tags:
- name: people
  description: Work with people.
- name: families
  description: Work with families.
- name: events
  description: Work with events.
- name: places
  description: Work with places.
- name: citations
  description: Work with citations.
- name: sources
  description: Work with sources.
- name: repositories
  description: Work with repositories.
- name: media
  description: Work with media.
- name: notes
  description: Work with notes.
- name: tags
  description: Work with tags.
- name: objects
  description: Work with primary objects.
- name: transactions
  description: Work with raw database transactions.
- name: types
  description: Work with default and custom types.
- name: name-formats
  description: Work with name formats.
- name: name-groups
  description: Work with name group mappings.
- name: bookmarks
  description: Work with bookmarks.
- name: filters
  description: Work with filters.
- name: translations
  description: Work with translations.
- name: relations
  description: Work with relationship calculator.
- name: living
  description: Work with living calculator.
- name: timelines
  description: Work with timelines.
- name: search
  description: Work with search engine.
- name: chat
  description: Work with AI chat.
- name: reports
  description: Work with reports.
- name: facts
  description: Work with record facts.
- name: holidays
  description: Work with holiday calculator.
- name: exporters
  description: Work with exporters.
- name: metadata
  description: Work with metadata.
- name: authentication
  description: Authentication services.
- name: users
  description: Work with users.


##############################################################################
# Endpoint definitions
##############################################################################

paths:

##############################################################################
# Endpoint - Token
##############################################################################

  /token:
    post:
      tags:
      - authentication
      summary: "Authenticate a user to obtain a pair of JWT access tokens."
      operationId: login
      parameters:
      - name: credentials
        in: body
        required: true
        description: "The user credentials required to obtain a token."
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/JWTAccessTokens"
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."


  /token/refresh:
    post:
      tags:
      - authentication
      summary: "Obtain a fresh JWT access token."
      operationId: refreshToken
      security:
        - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: "The JWT refresh token."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/JWTRefreshToken"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."

  /token/create_owner/:
    post:
      tags:
      - authentication
      summary: "Obtain a JWT access token that allows creating an admin or owner account if no other user exists yet."
      operationId: getTokenCreateOwner
      parameters:
      - name: tree
        in: body
        required: false
        type: string
        description: "If present, request a token for creating a tree owner. Otherwise, request a token for creating a site admin."
        example: 0de59650-9bc5-4ee8-957d-4c3eb0851981
      responses:
        201:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/JWTAccessToken"
        405:
          description: "Method Not Allowed: A user already exists."


##############################################################################
# Endpoint - Users
##############################################################################

  /users:
    get:
      tags:
      - users
      summary: "Get information about registered users."
      operationId: getUsers
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."
    post:
      tags:
      - users
      summary: "Create new users."
      operationId: createUsers
      security:
        - Bearer: []
      parameters:
      - name: user_details
        in: body
        schema:
          type: array
          items:
            type: object
            properties:
              name:
                description: "The new user's user name."
                type: string
              email:
                description: "The new user's e-mail address."
                type: string
              full_name:
                description: "The new user's full name."
                type: string
              password:
                description: "The new user's password."
                type: string
              role:
                description: An integer user role ID
                type: number
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        409:
          description: "Conflict: user already exists."
        422:
          description: "Unprocessable Entity: Invalid token or invalid tree."

  /users/{user_name}:
    parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: "The user name."
    get:
      tags:
      - users
      summary: "Get information about a registered user."
      operationId: getUser
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: User does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."
    put:
      tags:
      - users
      summary: "Update an existing user's details."
      operationId: updateUser
      security:
        - Bearer: []
      parameters:
      - name: user_details
        in: body
        schema:
          type: object
          properties:
            email:
              description: "The new user's e-mail address."
              type: string
            full_name:
              description: "The new user's full name."
              type: string
            role:
              description: "An integer user role ID."
              type: number
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: User does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."
    post:
      tags:
      - users
      summary: "Create a new user."
      operationId: createUser
      security:
        - Bearer: []
      parameters:
      - name: user_details
        in: body
        schema:
          type: object
          properties:
            email:
              description: "The new user's e-mail address."
              type: string
            full_name:
              description: "The new user's full name."
              type: string
            password:
              description: "The new user's password."
              type: string
            role:
              description: An integer user role ID
              type: number
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        409:
          description: "Conflict: user already exists."
        422:
          description: "Unprocessable Entity: Invalid token."
    delete:
      tags:
      - users
      summary: "Delete the user."
      operationId: deleteUser
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: user does not exist."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /users/{user_name}/register/:
    post:
      tags:
      - users
      summary: "Register a new user."
      operationId: registerUser
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: "The user name or '-' for the authenticated user."
      - name: user_details
        in: body
        schema:
          type: object
          properties:
            email:
              description: "The new user's e-mail address."
              type: string
            full_name:
              description: "The new user's full name."
              type: string
            password:
              description: "The new user's password."
              type: string
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        405:
          description: "Method Not Allowed: owner account missing."
        409:
          description: "Conflict: user already exists."
        422:
          description: "Unprocessable Entity: Invalid token."

  /users/{user_name}/create_owner/:
    post:
      tags:
      - users
      summary: "Create an admin or owner account if no other user exists yet."
      operationId: createOwner
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: "The user name for the account."
      - name: user_details
        in: body
        schema:
          type: object
          properties:
            email:
              description: "The new user's e-mail address."
              type: string
            full_name:
              description: "The new user's full name."
              type: string
            password:
              description: "The new user's password."
              type: string
            tree:
              description: "The new user's tree (optional)."
              type: string
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Forbidden: wrong token."
        405:
          description: "Method Not Allowed: a user already exists."
        422:
          description: "Unprocessable Entity: Invalid token."

  /users/{user_name}/password/change:
    post:
      tags:
      - users
      summary: "Change a user password."
      operationId: changeUserPassword
      security:
        - Bearer: []
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: "The user name or '-' for the authenticated user."
      - name: Authorization
        in: header
        required: true
        type: string
        description: "The JWT access token."
      - name: passwords
        in: body
        required: true
        schema:
          $ref: "#/definitions/PasswordChange"
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."


  /users/{user_name}/password/reset/trigger:
    post:
      tags:
      - users
      summary: "Trigger a password reset e-mail."
      operationId: triggerResetUserPassword
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: "The username of the user whose password should be reset."
      responses:
        201:
          description: "OK: e-mail successfully sent."
        202:
          description: "Accepted: e-mail will be sent in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        404:
          description: "Not found: user does not exist or has no e-mail address."
        422:
          description: "Unprocessable Entity: missing username."
        429:
          description: "Too many Requests: repeat in 1 second."
        500:
          description: "Server Error, e.g. failed to send e-mail."


  /users/-/password/reset:
    post:
      tags:
      - users
      summary: "Reset a user's password using a token from a reset e-mail."
      operationId: resetUserPassword
      security:
        - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: "The one-time password reset token."
      - name: new_password
        in: body
        schema:
          type: object
          properties:
            new_password:
              description: "The user's new password."
              type: string
      responses:
        201:
          description: "OK: password successfully reset."
        400:
          description: "Bad Request: Empty password."
        405:
          description: "Method Not Allowed: No authorization provider configured."
        409:
          description: "Conflict: One-time token has already been used."
        422:
          description: "Unprocessable Entity: missing password."
    get:
      tags:
      - users
      summary: "Display the password reset form."
      security:
        - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: "The one-time password reset token."
      responses:
        200:
          description: "OK: Form or error message displayed."
        401:
          description: "Unauthorized: Missing authorization header."
        405:
          description: "Method Not Allowed: No authorization provider configured."


  /users/-/email/confirm/:
    get:
      tags:
      - users
      summary: "Confirm the e-mail address after user registration."
      operationId: confirmEmail
      security:
        - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: "The one-time confirmation token."
      responses:
        200:
          description: "OK: e-mail successfully confirmed."
        403:
          description: "Forbidden: missing authorization."
        405:
          description: "Method Not Allowed: No authorization provider configured."

##############################################################################
# Endpoint - Tasks
##############################################################################

  /tasks/{task_id}:
    parameters:
      - name: task_id
        in: path
        required: true
        type: string
        description: "The task ID."
    get:
      tags:
      - tasks
      summary: "Return information about a task."
      operationId: getTask
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."

##############################################################################
# Endpoint - Config
##############################################################################

  /config:
    get:
      tags:
      - configuration
      summary: "List configuration settings."
      operationId: getConfigs
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."

  /config/{key}:
    parameters:
      - name: key
        in: path
        required: true
        type: string
        description: "The setting key."
    get:
      tags:
      - configuration
      summary: "Return the value of a configuration setting."
      operationId: getConfig
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not found: setting does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."
    put:
      tags:
      - configuration
      summary: "Update an existing setting."
      operationId: updateConfig
      security:
        - Bearer: []
      parameters:
      - name: config_details
        in: body
        schema:
          type: object
          properties:
            value:
              description: "The value of the setting."
              type: string
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: setting does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."
    post:
      tags:
      - configuration
      summary: "Add a value to a setting."
      operationId: setConfig
      security:
        - Bearer: []
      parameters:
      - name: config_details
        in: body
        schema:
          type: object
          properties:
            value:
              description: "The value of the setting."
              type: string
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: setting does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."
    delete:
      tags:
      - configuration
      summary: "Delete the setting."
      operationId: deleteConfig
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: setting does not exist."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - People
##############################################################################

  /people:
    get:
      tags:
      - people
      summary: "Get information about multiple people."
      operationId: getPeople
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a person, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For people the available keys are:

            Key | Description
            --- | -----------
            birth | The birth date of the person
            change | The time the record was last updated
            death | The death date of the person
            gender | The gender of the person
            gramps_id | The user assigned Gramps identifier for the person
            name | The sort name of the person
            private | Indicates whether the record is private or not
            soundex | The soundex code for the surname of the person
            surname | The surname of the person, taking into consideration the given name and suffix for people who share the same surname
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: soundex
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether to include the soundex code for the surname or not."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the person should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of possible keys on which it will operate. For people the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            family_list | The list of family records
            media_list | The list of referenced media items
            note_list | The list of note records
            parent_family_list | The list of parent family records
            person_ref_list | The list of referenced person records
            primary_parent_family | The primary parent family record
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the person and their familial relationships in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For people the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information below
            age | Returns age at time of a personal event
            self | Returns name, sex, birth and death information and is an implied default when events or families specified
            span | Returns elapsed time span from union that formed the family and familial events
            events | Returns event list with name, date and location
            ratings | Returns citation count and highest confidence rating for events
            families | Returns family information with parents, children, and key relationship between parents
            references | Returns information about objects that refer to the person
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No people found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - people
      summary: "Add a new person to the database."
      operationId: createPerson
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: person
          description: The person to add
          schema:
            $ref: "#/definitions/Person"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        405:
          description: "Method Not Allowed: Quota exceeded."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /people/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a person."
    get:
      tags:
      - people
      summary: "Get information about a specific person."
      operationId: getPerson
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: soundex
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether to include the soundex code for the surname or not."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the person should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a person the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            family_list | The list of family records
            media_list | The list of referenced media items
            note_list | The list of note records
            parent_family_list | The list of parent family records
            person_ref_list | The list of referenced person records
            primary_parent_family | The primary parent family record
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the person and their familial relationships in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For people the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information below
            age | Returns age at time of a personal event
            self | Returns name, sex, birth and death information and is an implied default when events or families specified
            span | Returns elapsed time span from union that formed the family and familial events
            events | Returns event list with name, date and location
            ratings | Returns citation count and highest confidence rating for events
            families | Returns family information with parents, children, and key relationship between parents
            references | Returns information about objects that refer to the person
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Person"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Person not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - people
      summary: "Update the person."
      operationId: updatePerson
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: person
          description: The updated person
          schema:
            $ref: "#/definitions/Person"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - people
      summary: "Delete the person."
      operationId: deletePerson
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /people/{handle}/timeline:
    get:
      tags:
      - people
      summary: "Get the timeline for a specific person."
      operationId: getPersonTimeline
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a person."
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date range to bound the timeline that may be provided in one of three formats as follows:


            Format | Description
            ------ | -----------
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date


          Note a person timeline is usually bounded by the first and last recorded event of their lives and this will override that behaviour. If this is not used the timeline boundaries can still be altered using the first and last parameters.
      - name: first
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not events dated prior to the first event for the person should be discarded or not. Note if the dates parameter is used this has no effect."
      - name: last
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not events dated after the last event for the person should be discarded or not. Note if the dates parameter is used this has no effect."
      - name: ancestors
        in: query
        required: false
        type: integer
        default: 1
        description: "The number of generations of ancestors to consider for relevant events."
      - name: offspring
        in: query
        required: false
        type: integer
        default: 1
        description: "The number of generations of offspring to consider for relevant events."
      - name: events
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list of specific events that should be considered for inclusion for the person. Note birth and death events are always included. If not present the default behaviour is to return all events.


          Note the event names may be for specific default or custom events, no distinction is made.
      - name: event_classes
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list identifying the classes of events that should be considered for inclusion for the person. Note that the birth and death events are always included. If not present the default behaviour is to return all events. A list of available event classes is as follows:


            Keyword | Contents
            ------- | --------
            vital | Birth, Adoption, Baptism, Death, Burial, Cremation
            family | Engagement, Marriage, Marriage Settlement, Marriage License, Marriage Contract, Marriage Banns, Marriage, Divorce Filing, Divorce, Annulment, Alternate Marriage
            religious | Christening, Adult Christening, Confirmation, First Communion, Blessing, Bar Mitzvah, Bas Mitzvah, Religion
            vocational | Occupation, Retirement, Elected, Military Service, Ordination
            academic | Education, Degree, Graduation
            travel | Emigration, Immigration, Naturalization
            legal | Probate, Will
            residence | Residence, Census, Property
            other | Cause of Death, Medical Information, Title of Nobility, Number of Marriages
            custom | All user defined custom events
      - name: relatives
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list identifying the types of relationships a relative needs to have to consider their events for inclusion in the timeline. If not present the default behaviour is to consider all of them. A list of available types is as follows:


            Relation | Notes
            -------- | -----
            father | Matches fathers and grand fathers
            mother | Matches mothers and grand mothers
            brother | Matches brothers
            sister | Matches sisters
            wife | Matches wife
            husband | Matches husband
            son | Matches sons and grand sons
            daughter | Matches daughters and grand daughters"
      - name: relative_events
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list of specific events that should be considered for inclusion for relatives of the person. Note that birth and death events are always included. If not present the default behaviour is to return the birth, marriage, divorce and death events.


          Note the event names may be for specific default or custom events, no distinction is made.
      - name: relative_event_classes
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list identifying the classes of events that should be considered for inclusion for relatives of the person. Note that the birth and death events are always included. If not present the default behaviour is to return the birth, marriage, divorce and death events. A list of available event classes is as follows:


            Keyword | Contents
            ------- | --------
            vital | Birth, Adoption, Baptism, Death, Burial, Cremation
            family | Engagement, Marriage, Marriage Settlement, Marriage License, Marriage Contract, Marriage Banns, Marriage, Divorce Filing, Divorce, Annulment, Alternate Marriage
            religious | Christening, Adult Christening, Confirmation, First Communion, Blessing, Bar Mitzvah, Bas Mitzvah, Religion
            vocational | Occupation, Retirement, Elected, Military Service, Ordination
            academic | Education, Degree, Graduation
            travel | Emigration, Immigration, Naturalization
            legal | Probate, Will
            residence | Residence, Census, Property
            other | Cause of Death, Medical Information, Title of Nobility, Number of Marriages
            custom | All user defined custom events
      - name: ratings
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to include total citation count and highest confidence score."
      - name: precision
        in: query
        required: false
        type: integer
        default: 1
        description: >
          Selects the number of significant levels for the string representation. Values may be:

            Precision | Description
            --------- | -----------
            1 | Only the most significant level (year, month, day)
            2 | Only the two most significant levels (year, month, day)
            3 | At most three items of signifance (year, month, day)
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: discard_empty
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not undated events should be discarded. It is recommended to leave this at the default of true."
      - name: omit_anchor
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not information for the person the timeline is for should be included in the response for events that pertain specifically to that person. It is recommended to leave this at the default of true."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/TimelineEventProfile"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."



  /people/{handle}/dna/matches:
    get:
      tags:
      - people
      summary: "Get DNA matches for a specific person."
      operationId: getPersonDnaMatches
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a person."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/DnaMatch"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Families
##############################################################################

  /families:
    get:
      tags:
      - families
      summary: "Get information about multiple families."
      operationId: getFamilies
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a family, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For families the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            gramps_id | The user assigned Gramps identifier for the family
            private | Indicates whether the record is private or not
            soundex | The soundex code for the surname of the father or, if none present, the mother of the family
            surname | The surname of the father or, if none present, the mother of the family taking into consideration the given name and suffix for families who share the same surname
            type | The relationship type for the family
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: soundex
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether to include the soundex code for the surname or not."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the family should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For families the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            child_ref_list | The list of referenced children records
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            father_handle | The person record of the father
            media_list | The list of referenced media items
            mother_handle | The person record of the mother
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the family in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For families the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information below
            age | Returns age at time of a personal event
            self | Returns family information with parents, children, and key relationship between parents and is an implied default if events specified
            span | Returns elapsed time span from union that formed the family and familial events
            events | Returns family event list with name, date and location
            ratings | Returns citation count and highest confidence rating for events
            references | Returns information about objects that refer to the family
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Family"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No families found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - families
      summary: "Add a new family to the database."
      operationId: createFamily
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: family
          description: The family to add
          schema:
            $ref: "#/definitions/Family"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /families/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a family."
    get:
      tags:
      - families
      summary: "Get information about a specific family."
      operationId: getFamily
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: soundex
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether to include the soundex code for the surname or not."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the family should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a family the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            child_ref_list | The list of referenced children records
            citation_list | The list of citation records
            event_ref_list | The list of referenced event records
            father_handle | The person record of the father
            media_list | The list of referenced media items
            mother_handle | The person record of the mother
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the family in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For a family the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information below
            age | Returns age at time of a personal event
            self | Returns family information with parents, children, and key relationship between parents and is an implied default if events specified
            span | Returns elapsed time span from union that formed the family and familial events
            events | Returns family event list with name, date and location
            ratings | Returns citation count and highest confidence rating for events
            references | Returns information about objects that refer to the family
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Family"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Family not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - families
      summary: "Update the family."
      operationId: updateFamily
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: family
          description: The updated family
          schema:
            $ref: "#/definitions/Family"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - families
      summary: "Delete the family."
      operationId: deleteFamily
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /families/{handle}/timeline:
    get:
      tags:
      - families
      summary: "Get the timeline for all the people in a specific family."
      operationId: getFamilyTimeline
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a person."
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date range to bound the timeline that may be provided in one of three formats as follows:


            Format | Description
            ------ | -----------
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date

          If not provided all events for all family members will be returned.
      - name: events
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list of specific events that should be considered for inclusion for the people in the family. Note birth and death events are always included. If not present the default behaviour is to return all events.


          Note the event names may be for specific default or custom events, no distinction is made.
      - name: event_classes
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list identifying the classes of events that should be considered for inclusion for the people in the family. Note that the birth and death events are always included. If not present the default behaviour is to return all events. A list of available event classes is as follows:


            Keyword | Contents
            ------- | --------
            vital | Birth, Adoption, Baptism, Death, Burial, Cremation
            family | Engagement, Marriage, Marriage Settlement, Marriage License, Marriage Contract, Marriage Banns, Marriage, Divorce Filing, Divorce, Annulment, Alternate Marriage
            religious | Christening, Adult Christening, Confirmation, First Communion, Blessing, Bar Mitzvah, Bas Mitzvah, Religion
            vocational | Occupation, Retirement, Elected, Military Service, Ordination
            academic | Education, Degree, Graduation
            travel | Emigration, Immigration, Naturalization
            legal | Probate, Will
            residence | Residence, Census, Property
            other | Cause of Death, Medical Information, Title of Nobility, Number of Marriages
            custom | All user defined custom events
      - name: ratings
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to include total citation count and highest confidence score."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: discard_empty
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not undated events should be discarded. It is recommended to leave this at the default of true."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/TimelineEventProfile"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Events
##############################################################################

  /events:
    get:
      tags:
      - events
      summary: "Get information about multiple events."
      operationId: getEvents
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for an event, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For events the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            date | The event date
            description | The event description
            gramps_id | The user assigned Gramps identifier for the event
            place | The event place
            private | Indicates whether the record is private or not
            type | The event type
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date filter that operates on the event date and can accept an argument in one of four formats as follows:


            Format | Description
            ------ | -----------
            y/m/d | Match the specific date or date pattern as * may be used to wild card an entry
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the event should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For events the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            place | The place record for the event
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the event in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For events the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information below
            events | Returns event name, date and location
            ratings | Returns citation count and highest confidence rating for events
            participants | Returns information about the event participants
            references | Returns information about objects that refer to the family
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No events found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - events
      summary: "Add a new event to the database."
      operationId: createEvent
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: event
          description: The event to add
          schema:
            $ref: "#/definitions/Event"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /events/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 0
        description: "The unique identifier for an event."
    get:
      tags:
      - events
      summary: "Get information about a specific event."
      operationId: getEvent
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the event should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For an event the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            place | The place record for the event
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the event in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For an event the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information below
            events | Returns event name, date and location
            ratings | Returns citation count and highest confidence rating for events
            references | Returns information about objects that refer to the event
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Event"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Event not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - events
      summary: "Update the event."
      operationId: updateEvent
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: event
          description: The updated event
          schema:
            $ref: "#/definitions/Event"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - events
      summary: "Delete the event."
      operationId: deleteEvent
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /events/{handle1}/span/{handle2}:
    get:
      tags:
      - events
      summary: "Get elapsed time span between two events."
      operationId: getEventSpan
      security:
        - Bearer: []
      parameters:
      - name: handle1
        in: path
        required: true
        type: string
        description: "The unique identifier for the first event."
      - name: handle2
        in: path
        required: true
        type: string
        description: "The unique identifier for the second event."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: as_age
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether to return result as an age or not."
      - name: precision
        in: query
        required: false
        type: integer
        default: 2
        description: >
          Selects the number of significant levels for the string representation. Values may be:

            Precision | Description
            --------- | -----------
            1 | Only the most significant level (year, month, day)
            2 | Only the two most significant levels (year, month, day)
            3 | At most three items of signifance (year, month, day)
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Span"
        400:
          description: "Bad Request: Bad syntax or parameter."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Event not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Places
##############################################################################

  /places:
    get:
      tags:
      - places
      summary: "Get information about multiple places."
      operationId: getPlaces
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a place, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For places the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            gramps_id | The user assigned Gramps identifier for the place
            latitude | The latitude for the place
            longitude | The longitude for the place
            private | Indicates whether the record is private or not
            title | The title or name of the place
            type | The place type
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the place should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For places the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the place in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For places the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information
            references | Returns information about objects that refer to the place
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Place"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No places found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - places
      summary: "Add a new place to the database."
      operationId: createPlace
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: place
          description: The place to add
          schema:
            $ref: "#/definitions/Place"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /places/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a place."
    get:
      tags:
      - places
      summary: "Get information about a specific place."
      operationId: getPlace
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the place should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a list of comma delimited keys on which it will operate. For a place the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            media_list | The list of referenced media items
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the place in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For places the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information
            references | Returns information about objects that refer to the place
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Place"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Place not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - places
      summary: "Update the place."
      operationId: updatePlace
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: place
          description: The updated place
          schema:
            $ref: "#/definitions/Place"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - places
      summary: "Delete the place."
      operationId: deletePlace
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Citations
##############################################################################

  /citations:
    get:
      tags:
      - citations
      summary: "Get information about multiple citations."
      operationId: getCitations
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a citation, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For citations the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            confidence | The confidence level for the citation
            date | The date of the citation
            gramps_id | The user assigned Gramps identifier for the citation
            private | Indicates whether the record is private or not
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date filter that operates on the citation date and can accept an argument in one of four formats as follows:


            Format | Description
            ------ | -----------
            y/m/d | Match the specific date or date pattern as * may be used to wild card an entry
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the citation should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For citations the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            source_handle | The source record cited from
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the citation in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For events the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information
            references | Returns information about objects that refer to the place
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Citation"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No citations found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - citations
      summary: "Add a new citation to the database."
      operationId: createCitation
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: citation
          description: The citation to add
          schema:
            $ref: "#/definitions/Citation"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /citations/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a citation."
    get:
      tags:
      - citations
      summary: "Get information about a specific citation."
      operationId: getCitation
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the citation should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a citation the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            source_handle | The source record cited from
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the citation in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For events the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information
            references | Returns information about objects that refer to the place
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Citation"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Citation not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - citations
      summary: "Update the citation."
      operationId: updateCitation
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: citation
          description: The updated citation
          schema:
            $ref: "#/definitions/Citation"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - citations
      summary: "Delete the citation."
      operationId: deleteCitation
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Sources
##############################################################################

  /sources:
    get:
      tags:
      - sources
      summary: "Get information about multiple sources."
      operationId: getSources
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a source, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For sources the available keys are:

            Key | Description
            --- | -----------
            abbrev | The abbreviation for the source
            author | The author of the source
            change | The time the record was last updated
            gramps_id | The user assigned Gramps identifier for the source
            private | Indicates whether the record is private or not
            pubinfo | The publication information for the source
            title | The title of the source
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the source should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For sources the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            reporef_list | The list of referenced repository records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Source"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No sources found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - sources
      summary: "Add a new source to the database."
      operationId: createSource
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: source
          description: The source to add
          schema:
            $ref: "#/definitions/Source"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /sources/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a source."
    get:
      tags:
      - sources
      summary: "Get information about a specific source."
      operationId: getSource
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the source should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a source the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            media_list | The list of referenced media items
            note_list | The list of note records
            reporef_list | The list of referenced repository records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Source"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Source not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - sources
      summary: "Update the source."
      operationId: updateSource
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: source
          description: The updated source
          schema:
            $ref: "#/definitions/Source"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - sources
      summary: "Delete the source."
      operationId: deleteSource
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Repositories
##############################################################################

  /repositories:
    get:
      tags:
      - repositories
      summary: "Get information about multiple repositories."
      operationId: getRepositories
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a repository, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For repositories the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            gramps_id | The user assigned Gramps identifier for the repository
            name | The name of the repository
            private | Indicates whether the record is private or not
            type | The type of repository
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "media_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the repository should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For repositories the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Repository"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No repositories found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - repositories
      summary: "Add a new repository to the database."
      operationId: createRepository
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: repository
          description: The repository to add
          schema:
            $ref: "#/definitions/Repository"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /repositories/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a repository."
    get:
      tags:
      - repositories
      summary: "Get information about a specific repository."
      operationId: getRepository
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the repository should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a repository the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Repository"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Repository not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - repositories
      summary: "Update the repository."
      operationId: updateRepository
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: repository
          description: The updated repository
          schema:
            $ref: "#/definitions/Repository"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - repositories
      summary: "Delete the repository."
      operationId: deleteRepository
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Media
##############################################################################

  /media:
    get:
      tags:
      - media
      summary: "Get information about multiple media items."
      operationId: getMediaItems
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a media item, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For media the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            date | The date associated with the media item
            gramps_id | The user assigned Gramps identifier for the media item
            mime | The mime type of the media item
            path | The path to the media item
            private | Indicates whether the record is private or not
            title | The title for the media item
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date filter that operates on the media item date and can accept an argument in one of four formats as follows:


            Format | Description
            ------ | -----------
            y/m/d | Match the specific date or date pattern as * may be used to wild card an entry
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "note_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the media item should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For media items the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the media in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For media items the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information
            references | Returns information about objects that refer to the place
      - name: filemissing
        in: query
        required: false
        type: boolean
        description: If present, only return media objects where the file is not available to the server.
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Media"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No media items found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - media
      summary: "Add a new media file to the database."
      operationId: createMedia
      security:
        - Bearer: []
      responses:
        201:
          description: Created
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        405:
          description: "Method Not Allowed: Quota exceeded."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /media/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a media item."
    get:
      tags:
      - media
      summary: "Get information about a specific media item."
      operationId: getMediaItem
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the media item should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a media item the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            citation_list | The list of citation records
            note_list | The list of note records
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about the media in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided. For media items the possible objects are:
            Object | Contents
            ------ | --------
            all | Returns all information
            references | Returns information about objects that refer to the place
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Media"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - media
      summary: "Update the media object."
      operationId: updateMedia
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: media
          description: The updated media object
          schema:
            $ref: "#/definitions/Media"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - media
      summary: "Delete the media object."
      operationId: deleteMedia
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /media/{handle}/file:
    parameters:
    - name: handle
      in: path
      required: true
      type: string
      minLength: 8
      description: "The unique identifier for a media item."
    get:
      tags:
      - media
      summary: "Download a specific media item."
      operationId: getMediaItemFile
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."
    put:
      tags:
      - media
      summary: "Update an existing media object's file."
      operationId: updateFile
      security:
        - Bearer: []
      parameters:
      - name: uploadmissing
        in: query
        required: false
        type: boolean
        default: false
        description: "To be set to true when uploading a missing file to an existing media object. Will not modify the object."
      responses:
        200:
          description: "OK. Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        405:
          description: "Method Not Allowed: Quota exceeded."
        409:
          description: "Conflict: Uploaded file identical to existing file or has wrong checksum for missing file."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /media/{handle}/face_detection:
    parameters:
    - name: handle
      in: path
      required: true
      type: string
      minLength: 8
      description: "The unique identifier for a media item."
    get:
      tags:
      - media
      summary: "Detect faces in an image."
      operationId: getMediaItemFaces
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              type: array
              items:
                type: number
              example: [10, 20, 30, 40]
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."
        501:
          description: "Not Implemented: Server does not support face detection."

  /media/{handle}/ocr:
    parameters:
    - name: handle
      in: path
      required: true
      type: string
      minLength: 8
      description: "The unique identifier for a media item."
    - name: lang
      in: query
      required: true
      type: string
      description: "A tesseract language identifier."
      example: "eng"
    - name: format
      in: query
      required: false
      type: string
      enum:
        - string
        - data
        - boxes
        - hocr
      description: "Requested output format. Defaults to 'string'."
    post:
      tags:
      - media
      summary: "Perform text recognition (OCR) on the image."
      operationId: postMediaItemOCR
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: Successful operation."
        202:
          description: "Accepted: text recognition will be peerformed in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
        501:
          description: "Not Implemented: Server does not support text recognition."


  /media/{handle}/thumbnail/{size}:
    get:
      tags:
      - media
      summary: "Download the thumbnail for a specific media item."
      operationId: getMediaItemThumbnail
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a media item."
      - name: size
        in: path
        required: true
        type: integer
        description: "The size of the thumbnail to generate."
      - name: square
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether image should be cropped to a centered square."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."


  /media/{handle}/cropped/{x1}/{y1}/{x2}/{y2}:
    get:
      tags:
      - media
      summary: "Download the cropped version of a specific media item."
      operationId: getMediaItemCropped
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a media item."
      - name: x1
        in: path
        required: true
        type: integer
        description: "The x1 coordinate to use for cropping."
      - name: y1
        in: path
        required: true
        type: integer
        description: "The y1 coordinate to use for cropping."
      - name: x2
        in: path
        required: true
        type: integer
        description: "The x2 coordinate to use for cropping."
      - name: y2
        in: path
        required: true
        type: integer
        description: "The y2 coordinate to use for cropping."
      - name: square
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether image should be cropped to a centered square."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."


  /media/{handle}/cropped/{x1}/{y1}/{x2}/{y2}/thumbnail/{size}:
    get:
      tags:
      - media
      summary: "Download the thumbnail of a cropped version of a specific media item."
      operationId: getMediaItemCroppedThumbnail
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a media item."
      - name: x1
        in: path
        required: true
        type: integer
        description: "The x1 coordinate to use for cropping."
      - name: y1
        in: path
        required: true
        type: integer
        description: "The y1 coordinate to use for cropping."
      - name: x2
        in: path
        required: true
        type: integer
        description: "The x2 coordinate to use for cropping."
      - name: y2
        in: path
        required: true
        type: integer
        description: "The y2 coordinate to use for cropping."
      - name: size
        in: path
        required: true
        type: integer
        description: "The size of the thumbnail to generate."
      - name: square
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether image should be cropped to a centered square."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Media item not found."



  /media/archive/:
    post:
      tags:
      - media
      summary: "Create an archive of media files."
      operationId: postMediaArchive
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: media archive created"
        202:
          description: "Accepted: media archive will be created in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."

  /media/archive/{filename}:
    get:
      tags:
      - media
      summary: "Download the generated media archive."
      operationId: getMediaArchive
      security:
        - Bearer: []
      parameters:
      - name: filename
        in: path
        required: true
        type: string
        description: "The file name of the generated file."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /media/archive/upload/zip:
    post:
      tags:
      - media
      summary: "Upload a zipped media file archive."
      operationId: uploadMediaFileArchive
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: Successful operation."
        202:
          description: "Accepted: import will be processed in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."

##############################################################################
# Endpoint - Notes
##############################################################################

  /notes:
    get:
      tags:
      - notes
      summary: "Get information about multiple notes."
      operationId: getNotes
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        description: "An alternate user managed identifier for a note, usually but not guaranteed to be unique."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For notes the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            gramps_id | The user assigned Gramps identifier for the note item
            private | Indicates whether the record is private or not
            text | The note text
            type | The note type
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom filter to be used when generating the result set."
      - name: formats
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of formats to apply to the note text, returning the result under the top level 'formatted' keyword. Supported formats are:


          html
      - name: format_options
        in: query
        required: false
        type: string
        description: >
          A user defined dictionary of options to be used by note formatters that must be provided in JSON format.

          Possible keys in the JSON object:
            Key | Description
            --- | -------
            link_format | Used by the 'html' formatter to format URLs to Gramps-internal links. Must be a template string that can contain '{obj_class}' (which will be replaced by, e.g, 'person'), '{gramps_id}', and '{handle}'.
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: gql
        in: query
        required: false
        type: string
        description: "A Gramps QL query string that is used to filter the objects."
        example: "tag_list.length >= 10"
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the note should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For notes the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Note"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No notes found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - notes
      summary: "Add a new note to the database."
      operationId: createNote
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: note
          description: The note to add
          schema:
            $ref: "#/definitions/Note"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /notes/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a note."
    get:
      tags:
      - notes
      summary: "Get information about a specific note."
      operationId: getNote
      security:
        - Bearer: []
      parameters:
      - name: formats
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of formats to apply to the note text, returning the result under the top level 'formatted' keyword. Supported formats are:


          html
      - name: format_options
        in: query
        required: false
        type: string
        description: >
          A user defined dictionary of options to be used by note formatters that must be provided in JSON format.

          Possible keys in the JSON object:
            Key | Description
            --- | -------
            link_format | Used by the 'html' formatter to format URLs to Gramps-internal links. Must be a template string that can contain '{obj_class}' (which will be replaced by, e.g, 'person'), '{gramps_id}', and '{handle}'.
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: backlinks
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether handles to objects referring to the note should be included in the response or not."
      - name: extend
        in: query
        required: false
        type: string
        description: >
          Enables the return of extended record information, allowing a client to fetch most of the available information for the object in one pass without having to perform multiple queries. These additional records are included under the top level 'extended' keyword in the response.


          Accepts a comma delimited list of keys on which it will operate. For a note the possible keys are:
            Key | Records
            --- | -------
            all | Returns all possible records listed below
            tag_list | The list of tags
            backlinks | The lists of backlinks per object type
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Note"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Note not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - notes
      summary: "Update the note."
      operationId: updateNote
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: source
          description: The updated note
          schema:
            $ref: "#/definitions/Note"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - notes
      summary: "Delete the note."
      operationId: deleteNote
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Tags
##############################################################################

  /tags:
    get:
      tags:
      - tags
      summary: "Get information about multiple tags."
      operationId: getTags
      security:
        - Bearer: []
      parameters:
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For notes the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            color | The color for the tag
            name | The name of the tag
            priority | The priority of the tag
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Tag"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: No tags found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - tags
      summary: "Add a new tag to the database."
      operationId: createTag
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: tag
          description: The tag to add
          schema:
            $ref: "#/definitions/Tag"
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /tags/{handle}:
    parameters:
      - name: handle
        in: path
        required: true
        type: string
        minLength: 8
        description: "The unique identifier for a tag."
    get:
      tags:
      - tags
      summary: "Get information about a specific tag."
      operationId: getTag
      security:
        - Bearer: []
      parameters:
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Tag"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Tag not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    put:
      tags:
      - tags
      summary: "Update the tag."
      operationId: updateTag
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: tag
          description: The updated tag
          schema:
            $ref: "#/definitions/Tag"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    delete:
      tags:
      - tags
      summary: "Delete the tag."
      operationId: deleteTag
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Objects
##############################################################################

  /objects:
    post:
      tags:
      - objects
      summary: "Add one or more new objects to the database."
      operationId: createObjects
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: objects
          description: The objects to add. Should be a list of Person, Family, Event, Place, Source, Citation, Repository, Media, or Tag object.
          schema:
            type: array
            items:
              type: object
      responses:
        201:
          description: Created
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /objects/delete/:
    post:
      tags:
      - objects
      summary: "Delete all objects in the database."
      operationId: deleteObjects
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - name: namespaces
          in: query
          required: false
          type: string
          description: "A comma delimited list of object types to be deleted."
          example: people,families,events
      responses:
        200:
          description: "OK: Successful operation."
        202:
          description: "Accepted: objects will be deleted in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header or token not fresh."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Transactions
##############################################################################

  /transactions:
    post:
      tags:
      - transactions
      summary: "Commit a raw database transaction."
      operationId: newTransaction
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - name: undo
          in: query
          required: false
          type: boolean
          description: "If true, apply the inverse of the transaction."
        - name: force
          in: query
          required: false
          type: boolean
          description: "If true, force applying the transaction even if objects have been modified."
        - in: body
          name: source
          description: The database transaction
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: Insufficient permissions."
        409:
          description: "Conflict: Objects have changed."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /transactions/history/:
    get:
      tags:
      - transactions
      summary: "Show the history of database transactions."
      operationId: getTransactionHistory
      security:
        - Bearer: []
      parameters:
      - name: old
        in: query
        required: false
        type: boolean
        description: "Whether to include the raw object data before the change."
      - name: new
        in: query
        required: false
        type: boolean
        description: "Whether to include the raw object data after the change."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: sort
        in: query
        required: false
        type: string
        description: "Sort the transactions. Can be 'id' to sort ascending, '-id' to sort descending."
      - name: before
        in: query
        required: false
        type: number
        description: "A Unix timestamp. If provided, will only return transactions committed before that point in time."
      - name: after
        in: query
        required: false
        type: number
        description: "A Unix timestamp. If provided, will only return transactions committed after that point in time."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/UndoTransaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /transactions/history/{transaction_id}:
    get:
      tags:
      - transactions
      summary: "Show the history of database transactions."
      operationId: getTransactionHistory
      security:
        - Bearer: []
      parameters:
      - name: transaction_id
        in: path
        required: true
        type: integer
        description: "The ID of the transaction."
      - name: old
        in: query
        required: false
        type: boolean
        description: "Whether to include the raw object data before the change."
      - name: new
        in: query
        required: false
        type: boolean
        description: "Whether to include the raw object data after the change."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/UndoTransaction"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."



##############################################################################
# Endpoint - Types
##############################################################################

  /types:
    get:
      tags:
      - types
      summary: "Get all available default and custom Gramps record types."
      operationId: getTypes
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Types"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /types/default:
    get:
      tags:
      - types
      summary: "Get all available Gramps default record types."
      operationId: getDefaultTypes
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/DefaultTypes"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /types/default/{datatype}:
    get:
      tags:
      - types
      summary: "Get the list of values for a specific Gramps default record type."
      operationId: getDefaultType
      security:
        - Bearer: []
      parameters:
      - name: datatype
        in: path
        required: true
        type: string
        description: "The Gramps default record type."
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            description: "The list of values for a specific Gramps default record type."
            type: array
            items:
              type: string
            example:
              - Custom
              - Audio
              - Book
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Gramps default record type not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /types/default/{datatype}/map:
    get:
      tags:
      - types
      summary: "Get the mapping for a specific Gramps default record type."
      operationId: getDefaultTypeMap
      security:
        - Bearer: []
      parameters:
      - name: datatype
        in: path
        required: true
        type: string
        description: "The Gramps default record type."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/DefaultTypeMap"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Gramps default record type not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /types/custom:
    get:
      tags:
      - types
      summary: "Get all available Gramps custom record types."
      operationId: getCustomTypes
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/CustomTypes"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /types/custom/{datatype}:
    get:
      tags:
      - types
      summary: "Get the list of values for a specific Gramps custom record type."
      operationId: getCustomType
      security:
        - Bearer: []
      parameters:
      - name: datatype
        in: path
        required: true
        type: string
        description: "The Gramps custom record type."
      - name: locale
        in: query
        required: false
        type: boolean
        description: "Return results in current locale when possible."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            description: "The list of values for a specific Gramps custom record type."
            type: array
            items:
              type: string
            example:
              - Microfilm
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Gramps custom record type not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - NameFormats
##############################################################################

  /name-formats:
    get:
      tags:
      - name-formats
      summary: "Get a list of name formats."
      operationId: getNameFormats
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/NameFormat"
        401:
          description: "Unauthorized: Missing authorization header."


##############################################################################
# Endpoint - NameGroups
##############################################################################

  /name-groups:
    get:
      tags:
      - name-groups
      summary: "Get a list of name group mappings."
      operationId: getNameGroupMappings
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/NameGroupMapping"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."


  /name-groups/{surname}:
    get:
      tags:
      - name-groups
      summary: "Get name group mapping for a given surname."
      operationId: getNameGroupMapping
      security:
        - Bearer: []
      parameters:
      - name: surname
        in: path
        required: true
        type: string
        description: "The surname for which to get the grouping."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/NameGroupMapping"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."


  /name-groups/{surname}/{group}:
    post:
      tags:
      - name-groups
      summary: "Set name group mapping for a given surname."
      operationId: setNameGroupMapping
      security:
        - Bearer: []
      parameters:
      - name: surname
        in: path
        required: true
        type: string
        description: "The surname to set the mapping for."
      - name: group
        in: path
        required: true
        type: string
        description: "The group to map the surname to."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/NameGroupMapping"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Missing surname."


##############################################################################
# Endpoint - Bookmarks
##############################################################################

  /bookmarks:
    get:
      tags:
      - bookmarks
      summary: "Get all bookmarks."
      operationId: getAllBookmarks
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Bookmarks"
        401:
          description: "Unauthorized: Missing authorization header."


  /bookmarks/{namespace}:
    get:
      tags:
      - bookmarks
      summary: "Get bookmarks for a given category."
      operationId: getBookmarks
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the bookmarks."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              type: string
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Bookmark type not found."


  /bookmarks/{namespace}/{handle}:
    put:
      tags:
      - bookmarks
      summary: "Add a bookmark to a given category."
      operationId: addBookmark
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the bookmarks."
      - name: handle
        in: path
        required: true
        type: string
        description: "The object's handle."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              type: string
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Bookmark type or handle not found."
    delete:
      tags:
      - bookmarks
      summary: "Delte a bookmark from a given category."
      operationId: deleteBookmark
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the bookmarks."
      - name: handle
        in: path
        required: true
        type: string
        description: "The object's handle."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              type: string
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Bookmark type not found or bookmark does not exist."


##############################################################################
# Endpoint - Filters
##############################################################################

  /filters:
    get:
      tags:
      - filters
      summary: "Get all custom filters and rules for all namespaces."
      operationId: getAllFilters
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: object
            properties:
              people:
                $ref: "#/definitions/NamespaceFilters"
              families:
                $ref: "#/definitions/NamespaceFilters"
              events:
                $ref: "#/definitions/NamespaceFilters"
              places:
                $ref: "#/definitions/NamespaceFilters"
              citations:
                $ref: "#/definitions/NamespaceFilters"
              sources:
                $ref: "#/definitions/NamespaceFilters"
              repositories:
                $ref: "#/definitions/NamespaceFilters"
              media:
                $ref: "#/definitions/NamespaceFilters"
              notes:
                $ref: "#/definitions/NamespaceFilters"
        401:
          description: "Unauthorized: Missing authorization header."


  /filters/{namespace}:
    get:
      tags:
      - filters
      summary: "Get custom filters and rules for a given namespace or category."
      operationId: getFilters
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the filters."
      - name: rules
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific filter rules to be returned."
      - name: filters
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific custom filters to be returned."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/NamespaceFilters"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Namespace not found."

    post:
      tags:
      - filters
      summary: "Create a custom filter."
      operationId: createFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: filter
        in: body
        required: true
        description: "The custom filter to create."
        schema:
          $ref: "#/definitions/CustomFilter"
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."

    put:
      tags:
      - filters
      summary: "Update a custom filter."
      operationId: updateFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: filter
        in: body
        required: true
        description: "The custom filter to update."
        schema:
          $ref: "#/definitions/CustomFilter"
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."


  /filters/{namespace}/{name}:
    get:
      tags:
      - filters
      summary: "Get a custom filter for a given namespace or category."
      operationId: getFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: name
        in: path
        required: true
        type: string
        description: "The name of a custom filter."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/CustomFilter"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Namespace or filter not found."

    delete:
      tags:
      - filters
      summary: "Delete a custom filter in a given namespace or category."
      operationId: deleteFilter
      security:
        - Bearer: []
      parameters:
      - name: namespace
        in: path
        required: true
        type: string
        description: "The namespace or category for the custom filter."
      - name: name
        in: path
        required: true
        type: string
        description: "The name of the custom filter."
      - name: force
        in: query
        required: false
        type: string
        description: "Force delete custom filter and all filters that depend upon it."
      responses:
        200:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing expected credentials."
        403:
          description: "Forbidden: Bad credentials, authentication failed."


##############################################################################
# Endpoint - Translations
##############################################################################

  /translations:
    get:
      tags:
      - translations
      summary: "Get information about available translations."
      operationId: getTranslations
      security:
        - Bearer: []
      parameters:
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the language code of the locale to be used as the current locale."
      - name: sort
        in: query
        required: false
        type: string
        default: "language"
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order.  For translations the available keys are:

            Key | Description
            --- | -----------
            current | The name of the language in the current locale
            default | The name of the language in the default locale
            language | The language code
            native | The native name of the language in it's own locale
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Language"
        401:
          description: "Unauthorized: Missing authorization header."


  /translations/{language}:
    get:
      tags:
      - translations
      summary: "Get a translation in a specific language."
      operationId: getTranslation
      security:
        - Bearer: []
      parameters:
      - name: language
        in: path
        required: true
        type: string
        description: "The language code or identifier."
      - name: strings
        in: query
        required: true
        type: string
        description: "The list of strings to be translated. These must be provided in JSON format."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Translation"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Language code was not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - translations
      summary: "Get a translation in a specific language."
      operationId: postTranslation
      security:
        - Bearer: []
      parameters:
      - name: language
        in: path
        required: true
        type: string
        description: "The language code or identifier."
      - name: strings
        in: body
        required: true
        type: string
        description: "The list of strings to be translated. These must be provided in JSON format."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Translation"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Language code was not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

##############################################################################
# Endpoint - Relations
##############################################################################

  /relations/{handle1}/{handle2}:
    get:
      tags:
      - relations
      summary: "Get description of most direct relationship between two people if one exists."
      operationId: getRelation
      security:
        - Bearer: []
      parameters:
      - name: handle1
        in: path
        required: true
        type: string
        description: "The handle of the first person."
      - name: handle2
        in: path
        required: true
        type: string
        description: "The handle of the second person."
      - name: depth
        in: query
        required: false
        type: integer
        default: 15
        description: "Depth for the search, default is 15 generations."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale for the translated string if one other than the current default is desired. Should be a valid language code from the available list of translations."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Relationship"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: One of the handles was not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /relations/{handle1}/{handle2}/all:
    get:
      tags:
      - relations
      summary: "Get descriptions for all possible relationships between two people if any exist."
      operationId: getRelations
      security:
        - Bearer: []
      parameters:
      - name: handle1
        in: path
        required: true
        type: string
        description: "The handle of the first person."
      - name: handle2
        in: path
        required: true
        type: string
        description: "The handle of the second person."
      - name: depth
        in: query
        required: false
        type: integer
        default: false
        description: "Depth for the search, default is 15 generations."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale for the translated string if one other than the current default is desired. Should be a valid language code from the available list of translations."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Relationships"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: One of the handles was not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Living
##############################################################################

  /living/{handle}:
    get:
      tags:
      - living
      summary: "Get whether or not a person is living."
      operationId: getAlive
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        description: "The handle of the person to evaluate."
      - name: average_generation_gap
        in: query
        required: false
        type: integer
        default: 20
        description: "Average number of years between generations."
      - name: max_age_probably_alive
        in: query
        required: false
        type: integer
        default: 110
        description: "Maximum possible age in years someone could be considered alive."
      - name: max_sibling_age_difference
        in: query
        required: false
        type: integer
        default: 20
        description: "Maximum possible age difference in years between youngest and oldest sibling."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Living"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Handle was not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /living/{handle}/dates:
    get:
      tags:
      - living
      summary: "Get estimated birth and death dates for a person."
      operationId: getAliveDates
      security:
        - Bearer: []
      parameters:
      - name: handle
        in: path
        required: true
        type: string
        description: "The handle of the person to evaluate."
      - name: average_generation_gap
        in: query
        required: false
        type: integer
        default: 20
        description: "Average number of years between generations."
      - name: max_age_probably_alive
        in: query
        required: false
        type: integer
        default: 110
        description: "Maximum possible age in years someone could be considered alive."
      - name: max_sibling_age_difference
        in: query
        required: false
        type: integer
        default: 20
        description: "Maximum possible age difference in years between youngest and oldest sibling."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale for the date string if one other than the current default is desired."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/LivingDates"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Handle was not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Timelines
##############################################################################

  /timelines/people/:
    get:
      tags:
      - timelines
      summary: "Get the timeline for a group of people."
      operationId: getPeopleTimeline
      security:
        - Bearer: []
      parameters:
      - name: anchor
        in: query
        required: false
        type: string
        description: "If provided the handle of a person to anchor the timeline."
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date range to bound the timeline that may be provided in one of three formats as follows:


            Format | Description
            ------ | -----------
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date

          Note if an anchor person was provided the timeline is usually bound by the first and last recorded event of their lives and this will override that behaviour. If this is not used and an anchor person is present the timeline boundaries can still be altered using the first and last parameters.
      - name: first
        in: query
        required: false
        type: boolean
        default: true
        description: "If an anchor person was provided then indicates whether or not events dated prior to the first event for the anchor person should be discarded or not. Note if the dates parameter is used this has no effect."
      - name: last
        in: query
        required: false
        type: boolean
        default: true
        description: "If an anchor person was provided then indicates whether or not events dated after the last event for the anchor person should be discarded or not. Note if the date parameter has been used this has no effect."
      - name: handles
        in: query
        required: false
        type: string
        minLength: 8
        description: "A comma delimited list of handles for specific people to put on the timeline. If not provided everyone in the database is evaluated."
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom people filter to be applied to generate the list of people to put on the timeline."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: events
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list of specific events that should be considered for inclusion for the people. Note birth and death events are always included. If not present the default behaviour is to return all events.


          Note the event names may be for specific default or custom events, no distinction is made.
      - name: event_classes
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list identifying the classes of events that should be considered for inclusion for the people. Note that the birth and death events are always included. If not present the default behaviour is to return all events. A list of available event classes is as follows:


            Keyword | Contents
            ------- | --------
            vital | Birth, Adoption, Baptism, Death, Burial, Cremation
            family | Engagement, Marriage, Marriage Settlement, Marriage License, Marriage Contract, Marriage Banns, Marriage, Divorce Filing, Divorce, Annulment, Alternate Marriage
            religious | Christening, Adult Christening, Confirmation, First Communion, Blessing, Bar Mitzvah, Bas Mitzvah, Religion
            vocational | Occupation, Retirement, Elected, Military Service, Ordination
            academic | Education, Degree, Graduation
            travel | Emigration, Immigration, Naturalization
            legal | Probate, Will
            residence | Residence, Census, Property
            other | Cause of Death, Medical Information, Title of Nobility, Number of Marriages
            custom | All user defined custom events
      - name: ratings
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to include total citation count and highest confidence score."
      - name: precision
        in: query
        required: false
        type: integer
        default: 1
        description: >
          Selects the number of significant levels for the string representation. Values may be:

            Precision | Description
            --------- | -----------
            1 | Only the most significant level (year, month, day)
            2 | Only the two most significant levels (year, month, day)
            3 | At most three items of signifance (year, month, day)
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: discard_empty
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not undated events should be discarded. It is recommended to leave this at the default of true."
      - name: omit_anchor
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not information for the person the timeline is for should be included in the response for events that pertain specifically to that person. It is recommended to leave this at the default of true."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/TimelineEventProfile"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /timelines/families/:
    get:
      tags:
      - timelines
      summary: "Get the timeline for all the people in a group of families."
      operationId: getFamiliesTimeline
      security:
        - Bearer: []
      parameters:
      - name: handles
        in: query
        required: false
        type: string
        minLength: 8
        description: "A comma delimited list of handles for specific families to put on the timeline. If not provided every family in the database is evaluated."
      - name: dates
        in: query
        required: false
        type: string
        description: >
          A date range to bound the timeline that may be provided in one of three formats as follows:


            Format | Description
            ------ | -----------
            -y/m/d | Match everything before the provided end date
            y/m/d-y/m/d | Match everything in the given date range
            y/m/d- | Match everthing after the provided start date
      - name: filter
        in: query
        required: false
        type: string
        description: "The name of an existing custom family filter to be applied to generate the list of families to put on the timeline."
      - name: rules
        in: query
        required: false
        type: string
        description: >
          A user defined custom filter expression consisting of one of more filter rules to be used when generating the result set.


          This filter is built and applied dynamically, it is not saved like a custom filter. It consists of one or more rules acting in combination, some of which can accept custom filters as arguments.


          The expression must be provided in JSON format and a number of fields are not required and have defaults if not present. The structure is defined as follows:


          {"function": function, "invert": invert, "rules": [{"name": name, "values": [values], "regex": regex}]}


          The function value is a string for the logical operation. Valid values are 'and', 'or', 'xor' and 'one'. If not present the default is 'and'.


          The invert value is a boolean, true or false, that indicates if the results should be inverted. If not present the default is false.


          The rules consists of the list of rules to be evaluated. It is a mandatory field.


          The name in a rule entry is the name of a predefined rule.  A list of rules with their names and descriptions can be obtained from the filters endpoint. It is a mandatory field.


          The values list in the rule entry is optional and defaults to an empty list if not present.  Some rules take no arguments and others may take one or more arguments of different types that would need to be provided here.


          The regex value is a boolean, true or false, that indicates if text values should be treated as regular expressions. If not present the default is false.
      - name: events
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list of specific events that should be considered for inclusion for the people in the families. Note birth and death events are always included. If not present the default behaviour is to return all events.


          Note the event names may be for specific default or custom events, no distinction is made.
      - name: event_classes
        in: query
        required: false
        type: string
        description: >
          If present a comma delimited list identifying the classes of events that should be considered for inclusion for the people in the families. Note that the birth and death events are always included. If not present the default behaviour is to return all events. A list of available event classes is as follows:


            Keyword | Contents
            ------- | --------
            vital | Birth, Adoption, Baptism, Death, Burial, Cremation
            family | Engagement, Marriage, Marriage Settlement, Marriage License, Marriage Contract, Marriage Banns, Marriage, Divorce Filing, Divorce, Annulment, Alternate Marriage
            religious | Christening, Adult Christening, Confirmation, First Communion, Blessing, Bar Mitzvah, Bas Mitzvah, Religion
            vocational | Occupation, Retirement, Elected, Military Service, Ordination
            academic | Education, Degree, Graduation
            travel | Emigration, Immigration, Naturalization
            legal | Probate, Will
            residence | Residence, Census, Property
            other | Cause of Death, Medical Information, Title of Nobility, Number of Marriages
            custom | All user defined custom events
      - name: ratings
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to include total citation count and highest confidence score."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: discard_empty
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not undated events should be discarded. It is recommended to leave this at the default of true."
      - name: page
        in: query
        required: false
        type: integer
        default: 0
        description: "If provided the page number representing a subset of results to be returned. By default all are returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of items that constitute a page."
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of the response or not."
      - name: keys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to return in the response, omitting all others."
      - name: skipkeys
        in: query
        required: false
        type: string
        description: "A comma delimited list of specific top level keys to omit from a response, keeping all others."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/TimelineEventProfile"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Search
##############################################################################

  /search:
    get:
      tags:
      - search
      summary: "Perform a full-text search on multiple objects."
      operationId: getSearch
      security:
        - Bearer: []
      parameters:
      - name: query
        in: query
        required: true
        type: string
        description: "The search string."
      - name: page
        in: query
        required: false
        type: integer
        default: 1
        description: "The page number representing the subset of search results to be returned."
      - name: pagesize
        in: query
        required: false
        type: integer
        default: 20
        description: "The number of search results that constitute a page."
      - name: type
        in: query
        required: false
        type: string
        description: "A comma delimited list of object types to include."
        example: person,family,source
      - name: sort
        in: query
        required: false
        type: string
        description: >
          A comma delimited list of keys to sort the result set by.  By default the sort is in ascending order, if the key name starts with a - sign then the sort will be in descending order. For search the available keys are:

            Key | Description
            --- | -----------
            change | The time the record was last updated
            type | The type of object (e.g. person)
      - name: strip
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether keys with empty values should be stripped out of primary objects in the response or not."
      - name: locale
        in: query
        required: false
        type: string
        description: "Specifies the locale to be used where applicable if one other than the current default is desired. Should be a valid language code from the available list of translations."
      - name: profile
        in: query
        required: false
        type: string
        description: >
          Enables the return of summarized information about a person, family, or event in a more readily consumable format. This additional information is returned under the top level 'profile' keyword in the response.


          Accepts a comma delimited list of possible objects to be provided which may vary by type. A list of all possible objects is:
            Object | Contents
            ------ | --------
            all | Returns all information below
            age | Returns age at time of a personal event
            self | Returns name, sex, birth and death information and is an implied default when events or families specified
            span | Returns elapsed time span from union that formed the family and familial events
            events | Returns event list with name, date and location
            families | Returns family information with parents, children, and key relationship between parents
      - name: semantic
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether semantic search should be used rather than full-text search (the default)."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/SearchResult"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /search/index/:
    post:
      tags:
      - search
      summary: "Trigger a reindex of the search index."
      operationId: reindexSearch
      security:
        - Bearer: []
      parameters:
      - name: full
        in: query
        required: false
        type: boolean
        default: false
        description: "Perform a full or incremental (default) reindex."
      - name: semantic
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether the semantic search index should be updated rather than full-text search index (the default)."
      responses:
        201:
          description: "OK: Successful operation."
        202:
          description: "Accepted: reindex will be performed in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

##############################################################################
# Endpoint - Chat
##############################################################################

  /chat:
    get:
      tags:
      - chat
      summary: "Answer a chat prompt."
      operationId: completeChat
      security:
        - Bearer: []
      parameters:
      - name: query
        in: query
        required: true
        type: string
        description: "The query prompt."
      - name: history
        in: query
        required: false
        type: string
        description: >
          An optional JSON object with a history of chat messages.
          It should be an array of objects that have two string properties: `role` being one of `human` or `ai`, and `message` being the message content.
        example: "[{\"role\":\"human\",\"message\":\"Hello AI!\"},{\"role\":\"ai\",\"message\":\"Hello Human!\"}]"
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/ChatResponse"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

##############################################################################
# Endpoint - Reports
##############################################################################

  /reports:
    get:
      tags:
      - reports
      summary: "Get information about available reports."
      operationId: getAllReports
      security:
        - Bearer: []
      parameters:
      - name: include_help
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether the report options help should be included."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Report"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /reports/{report_id}:
    get:
      tags:
      - reports
      summary: "Get information about a specific report."
      operationId: getReport
      security:
        - Bearer: []
      parameters:
      - name: report_id
        in: path
        required: true
        type: string
        description: "The report identifier."
      - name: include_help
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether the report options help should be included."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Report"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Report id not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /reports/{report_id}/file:
    get:
      tags:
      - reports
      summary: "Get a specific report."
      operationId: getReportFile
      security:
        - Bearer: []
      parameters:
      - name: report_id
        in: path
        required: true
        type: string
        description: "The report identifier."
      - name: options
        in: query
        required: false
        type: string
        description: >
          The report options. Must be provided in JSON format.


          There are a core set of options common to all reports, and then sometimes additional options
          specific to a given report. A few reports do not have defaults for all options and require
          some be specified in order to run properly.


          If no _off_ option for report output file format is provided then pdf will be used as a fallback.
          The _of_ option for output file is rejected by this endpoint as the report file is ephemeral.
      - name: locale
        in: query
        required: false
        type: string
        default: "current locale"
        description: "The language code of the locale to use for the report."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Report id not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - reports
      summary: "Get a specific report."
      operationId: postReportFile
      security:
        - Bearer: []
      parameters:
      - name: report_id
        in: path
        required: true
        type: string
        description: "The report identifier."
      - name: options
        in: query
        required: false
        type: string
        description: >
          The report options. Must be provided in JSON format.


          There are a core set of options common to all reports, and then sometimes additional options
          specific to a given report. A few reports do not have defaults for all options and require
          some be specified in order to run properly.


          If no _off_ option for report output file format is provided then pdf will be used as a fallback.
          The _of_ option for output file is rejected by this endpoint as the report file is ephemeral.
      - name: locale
        in: query
        required: false
        type: string
        default: "current locale"
        description: "The language code of the locale to use for the report."
      responses:
        201:
          description: "OK: report file generated."
          schema:
            type: object
            properties:
              file_name:
                description: "The file name of the generated report."
                type: string
                example: 8fa0232e-d06b-40a9-a5e1-ee26ee2f970f.pdf
              file_type:
                description: "The extension name of the generated report file."
                type: string
                example: .pdf
              url:
                description: "The URL of the exported file."
                type: string
                example: /reports/ancestor_report/file/processed/8fa0232e-d06b-40a9-a5e1-ee26ee2f970f.pdf
        202:
          description: "Accepted: report will be generated in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        400:
          description: "Bad Request: Malformed request could not be parsed."
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Report id not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."



  /reports/{report_id}/file/processed/{filename}:
    get:
      tags:
      - reports
      summary: "Download the generated report file."
      operationId: getProcessedReportFile
      security:
        - Bearer: []
      parameters:
      - name: report_id
        in: path
        required: true
        type: string
        description: "The report identifier."
      - name: filename
        in: path
        required: true
        type: string
        description: "The file name of the generated file."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Exporter not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Facts
##############################################################################

  /facts/:
    get:
      tags:
      - facts
      summary: "Get interesting facts about records in the tree."
      operationId: getRecordFacts
      security:
        - Bearer: []
      parameters:
      - name: gramps_id
        in: query
        required: false
        type: string
        default: null
        description: "The Gramps identifier of the person to whom a built in person filter should be applied if one was provided."
      - name: handle
        in: query
        required: false
        type: string
        default: null
        description: "The handle identifying the person to whom a built in person filter should be applied if one was provided. If gramps_id was also provided that will always take precedence."
      - name: living
        in: query
        required: false
        type: string
        default: "IncludeAll"
        description: >
          The name of a built in proxy function controlling how people determined to be living should be handled. Possible values are:


            Keyword | Description
            ------- | -----------
            IncludeAll | Include all living people and information about them
            FullNameOnly | Include only the full name of living people omitting all other information about them
            LastNameOnly | Replace the first name of living people with 'living' omitting all other information about them
            ReplaceCompleteName | Replace the full name of living people with 'living' 'living' omitting all other information about them
            ExcludeAll | Exclude all living people
      - name: locale
        in: query
        required: false
        type: string
        default: "current locale"
        description: "The language code of the locale to use for those items to which translation can be applied."
      - name: person
        in: query
        required: false
        type: string
        default: null
        description: >
          If provided the name of a built in or a custom filter to apply. Built in filters are applied with respect to a person so a gramps_id or handle must also be provided separately. The four built in filters are:


            Keyword | Description
            ------- | -----------
            Descendants | Matches all descendants of the given person
            DescendantFamilies | Matches all descendant families of the given person
            Ancestors | Matches all ancestors of the given person
            CommonAncestor | Matches all people who have a common ancestory with the given person
      - name: private
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to exclude all records marked private."
      - name: rank
        in: query
        required: false
        type: integer
        default: 1
        description: "Determines how many objects should be returned for ranked statistics items."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/RecordFact"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Exporters
##############################################################################

  /exporters:
    get:
      tags:
      - exporters
      summary: "Get all exporters."
      operationId: getAllExporters
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Exporter"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /exporters/{extension}:
    get:
      tags:
      - exporters
      summary: "Get a specific exporter."
      operationId: getExporter
      security:
        - Bearer: []
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: "The file extension used by a specific exporter."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Exporter"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Exporter not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /exporters/{extension}/file:
    get:
      tags:
      - exporters
      summary: "Get the export file generated by the given exporter."
      operationId: getExportFile
      security:
        - Bearer: []
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: "The file extension used by a specific exporter."
      - name: compress
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether compression should be used or not if it is supported by the given exporter."
      - name: current_year
        in: query
        required: false
        type: integer
        default: null
        description: "If provided specifies the year to be considered as the current year for purposes of calculating whether someone may still be alive. The default value of null indicates the current year should be used."
      - name: event
        in: query
        required: false
        type: string
        default: null
        description: "If provided the name of a custom event filter to apply during the export."
      - name: gramps_id
        in: query
        required: false
        type: string
        default: null
        description: "The Gramps identifier of the person to whom a built in person filter should be applied during the export if one was provided."
      - name: handle
        in: query
        required: false
        type: string
        default: null
        description: "The handle identifying the person to whom a built in person filter should be applied during the export if one was provided. If gramps_id was also provided that will always take precedence."
      - name: include_children
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if children should be included in the export. Specific to the csv exporter."
      - name: include_individuals
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if individuals should be included in the export. Specific to the csv exporter."
      - name: include_marriages
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if marriages should be included in the export. Specific to the csv exporter."
      - name: include_media
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if media should be included in the export. Specific to the third party ged2 exporter."
      - name: include_places
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if places should be included in the export. Specific to the csv exporter."
      - name: include_witnesses
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if witnesses should be included in the export. Specific to the third party ged2 exporter."
      - name: living
        in: query
        required: false
        type: string
        default: "IncludeAll"
        description: >
          The name of a built in proxy function controlling how people determined to be living should be handled during the export. Possible values are:


            Keyword | Description
            ------- | -----------
            IncludeAll | Include all living people and information about them in the export
            FullNameOnly | Include only the full name of living people omitting all other information about them
            LastNameOnly | Replace the first name of living people with 'living' omitting all other information about them
            ReplaceCompleteName | Replace the full name of living people with 'living' 'living' omitting all other information about them
            ExcludeAll | Exclude all living people from the export
      - name: locale
        in: query
        required: false
        type: string
        default: "current locale"
        description: "The language code of the locale to use for those items to which translation can be applied when filtering the names of living people."
      - name: note
        in: query
        required: false
        type: string
        default: null
        description: "If provided the name of a custom note filter to apply during the export."
      - name: person
        in: query
        required: false
        type: string
        default: null
        description: >
          If provided the name of a built in or a custom filter to apply during the export. Built in filters are applied with respect to a person so a gramps_id or handle must also be provided separately. The four built in filters are:


            Keyword | Description
            ------- | -----------
            Descendants | Matches all descendants of the given person
            DescendantFamilies | Matches all descendant families of the given person
            Ancestors | Matches all ancestors of the given person
            CommonAncestor | Matches all people who have a common ancestory with the given person
      - name: private
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to exclude all records marked private from the export."
      - name: reference
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to include records not linked to a selected person for the export."
      - name: sequence
        in: query
        required: false
        type: string
        default: "privacy,living,person,event,note,reference"
        description: "A comma delimited list that determines the order in which any provided filters will be applied to the database."
      - name: translate_headers
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not header records in a csv export should be translated. Note it is to the current locale, the locale keyword does not influence it. Specific to the csv exporter."
      - name: years_after_death
        in: query
        required: false
        type: integer
        default: 0
        description: "Determines how many years after the death of a person they should still be treated as living for export purposes."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Exporter not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."
    post:
      tags:
      - exporters
      summary: "Trigger generation of the export by the given exporter."
      operationId: postExportFile
      security:
        - Bearer: []
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: "The file extension used by a specific exporter."
      - name: compress
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether compression should be used or not if it is supported by the given exporter."
      - name: current_year
        in: query
        required: false
        type: integer
        default: null
        description: "If provided specifies the year to be considered as the current year for purposes of calculating whether someone may still be alive. The default value of null indicates the current year should be used."
      - name: event
        in: query
        required: false
        type: string
        default: null
        description: "If provided the name of a custom event filter to apply during the export."
      - name: gramps_id
        in: query
        required: false
        type: string
        default: null
        description: "The Gramps identifier of the person to whom a built in person filter should be applied during the export if one was provided."
      - name: handle
        in: query
        required: false
        type: string
        default: null
        description: "The handle identifying the person to whom a built in person filter should be applied during the export if one was provided. If gramps_id was also provided that will always take precedence."
      - name: include_children
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if children should be included in the export. Specific to the csv exporter."
      - name: include_individuals
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if individuals should be included in the export. Specific to the csv exporter."
      - name: include_marriages
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if marriages should be included in the export. Specific to the csv exporter."
      - name: include_media
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if media should be included in the export. Specific to the third party ged2 exporter."
      - name: include_places
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if places should be included in the export. Specific to the csv exporter."
      - name: include_witnesses
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates if witnesses should be included in the export. Specific to the third party ged2 exporter."
      - name: living
        in: query
        required: false
        type: string
        default: "IncludeAll"
        description: >
          The name of a built in proxy function controlling how people determined to be living should be handled during the export. Possible values are:


            Keyword | Description
            ------- | -----------
            IncludeAll | Include all living people and information about them in the export
            FullNameOnly | Include only the full name of living people omitting all other information about them
            LastNameOnly | Replace the first name of living people with 'living' omitting all other information about them
            ReplaceCompleteName | Replace the full name of living people with 'living' 'living' omitting all other information about them
            ExcludeAll | Exclude all living people from the export
      - name: locale
        in: query
        required: false
        type: string
        default: "current locale"
        description: "The language code of the locale to use for those items to which translation can be applied when filtering the names of living people."
      - name: note
        in: query
        required: false
        type: string
        default: null
        description: "If provided the name of a custom note filter to apply during the export."
      - name: person
        in: query
        required: false
        type: string
        default: null
        description: >
          If provided the name of a built in or a custom filter to apply during the export. Built in filters are applied with respect to a person so a gramps_id or handle must also be provided separately. The four built in filters are:


            Keyword | Description
            ------- | -----------
            Descendants | Matches all descendants of the given person
            DescendantFamilies | Matches all descendant families of the given person
            Ancestors | Matches all ancestors of the given person
            CommonAncestor | Matches all people who have a common ancestory with the given person
      - name: private
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to exclude all records marked private from the export."
      - name: reference
        in: query
        required: false
        type: boolean
        default: false
        description: "Indicates whether or not to include records not linked to a selected person for the export."
      - name: sequence
        in: query
        required: false
        type: string
        default: "privacy,living,person,event,note,reference"
        description: "A comma delimited list that determines the order in which any provided filters will be applied to the database."
      - name: translate_headers
        in: query
        required: false
        type: boolean
        default: true
        description: "Indicates whether or not header records in a csv export should be translated. Note it is to the current locale, the locale keyword does not influence it. Specific to the csv exporter."
      - name: years_after_death
        in: query
        required: false
        type: integer
        default: 0
        description: "Determines how many years after the death of a person they should still be treated as living for export purposes."
      responses:
        201:
          description: "OK: export completed."
          schema:
            type: object
            properties:
              file_name:
                description: "The file name of the exported file."
                type: string
                example: 8fa0232e-d06b-40a9-a5e1-ee26ee2f970f.gramps
              file_type:
                description: "The extension name of the exported file."
                type: string
                example: .gramps
              url:
                description: "The URL of the exported file."
                type: string
                example: /exporters/gramps/file/processed/8fa0232e-d06b-40a9-a5e1-ee26ee2f970f.gramps
        202:
          description: "Accepted: export will be created in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Exporter not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /exporters/{extension}/file/processed/{filename}:
    get:
      tags:
      - exporters
      summary: "Download the export file generated by the given exporter."
      operationId: getProcessedExportFile
      security:
        - Bearer: []
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: "The file extension used by a specific exporter."
      - name: filename
        in: path
        required: true
        type: string
        description: "The file name of the generated file."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: file
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Exporter not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Importers
##############################################################################

  /importers:
    get:
      tags:
      - importers
      summary: "Get all importers."
      operationId: getAllImporters
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Importer"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


  /importers/{extension}:
    get:
      tags:
      - importers
      summary: "Get a specific importer."
      operationId: getImporter
      security:
        - Bearer: []
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: "The file extension used by a specific importer."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Importer"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Importer not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."

  /importers/{extension}/file:
    post:
      tags:
      - importers
      summary: "Upload a file to import."
      operationId: postImportFile
      security:
        - Bearer: []
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: "The file extension used by a specific importer."
      responses:
        201:
          description: "OK: resource created."
        202:
          description: "Accepted: file will be imported in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        404:
          description: "Not Found: Importer not found."
        422:
          description: "Unprocessable Entity: Invalid or bad parameter provided."


##############################################################################
# Endpoint - Holidays
##############################################################################

  /holidays:
    get:
      tags:
      - holidays
      summary: "Get the list of countries with available holiday calendars."
      operationId: getHolidayCalendars
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Countries"
        401:
          description: "Unauthorized: Missing authorization header."

  /holidays/{country}/{year}/{month}/{day}:
    get:
      tags:
      - holidays
      summary: "Get any holiday names for the given date in the given country."
      operationId: getHolidays
      security:
        - Bearer: []
      parameters:
      - name: country
        in: path
        required: true
        type: string
        description: "The country name."
      - name: year
        in: path
        required: true
        type: integer
        description: "The year."
      - name: month
        in: path
        required: true
        type: integer
        description: "The month."
      - name: day
        in: path
        required: true
        type: integer
        description: "The day."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Holidays"
        401:
          description: "Unauthorized: Missing authorization header."

##############################################################################
# Endpoint - Metadata
##############################################################################

  /metadata:
    get:
      tags:
      - metadata
      summary: "Get information about the application environment and state."
      operationId: getMetadata
      security:
        - Bearer: []
      parameters:
      - name: surnames
        in: query
        required: false
        type: boolean
        default: false
        description: "If true, also include the surname list in the result."
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Metadata"
        401:
          description: "Unauthorized: Missing authorization header."


##############################################################################
# Endpoint - Trees
##############################################################################

  /trees/:
    get:
      tags:
      - trees
      summary: "Return information about multiple trees."
      operationId: getTrees
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Tree"
        401:
          description: "Unauthorized: Missing authorization header."
        422:
          description: "Unprocessable Entity: Invalid token."
    post:
      parameters:
      - name: name
        in: body
        required: true
        description: "The name of the tree."
      - name: quota_media
        in: body
        type: integer
        required: false
        description: "The maxium size of media objects."
      - name: quota_people
        in: body
        type: integer
        required: false
        description: "The maxium number of people."
      - name: min_role_ai
        in: body
        type: integer
        required: false
        description: "The minimum user role required to use the chat endpoint."
      tags:
      - trees
      summary: "Create a new empty tree."
      operationId: addTree
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: resource created."
          schema:
            $ref: "#/definitions/Tree"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: tree does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."


  /trees/{tree_id}:
    parameters:
      - name: tree_id
        in: path
        required: true
        type: string
        description: "The tree ID."
    get:
      tags:
      - trees
      summary: "Return information about a tree."
      operationId: getTree
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            $ref: "#/definitions/Tree"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: tree does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."
    put:
      parameters:
        - name: tree_id
          in: path
          required: true
          type: string
          description: "The tree ID."
        - name: quota_media
          in: body
          type: integer
          required: true
          description: "The maxium size of media objects."
        - name: quota_people
          in: body
          type: integer
          required: true
          description: "The maxium number of people."
      tags:
      - trees
      summary: "Update details about a tree."
      operationId: updateTree
      security:
        - Bearer: []
      responses:
        200:
          description: "OK: Successful operation."
          schema:
            type: object
            properties:
              old_name:
                description: "The old tree name."
                type: string
              new_name:
                description: "The new tree name."
                type: string
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: tree does not exist."
        422:
          description: "Unprocessable Entity: Invalid token."

  /trees/{tree_id}/disable:
    parameters:
      - name: tree_id
        in: path
        required: true
        type: string
        description: "The tree ID."
    post:
      tags:
      - trees
      summary: "Disable a tree."
      operationId: disableTree
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: tree does not exist."
        405:
          description: "Method Not Allowed in single-tree setup."


  /trees/{tree_id}/enable:
    parameters:
      - name: tree_id
        in: path
        required: true
        type: string
        description: "The tree ID."
    post:
      tags:
      - trees
      summary: "Enable a tree."
      operationId: enableTree
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: Successful operation."
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        404:
          description: "Not found: tree does not exist."
        405:
          description: "Method Not Allowed in single-tree setup."

  /trees/{tree_id}/migrate:
    parameters:
      - name: tree_id
        in: path
        required: true
        type: string
        description: "The tree ID."
    post:
      tags:
      - trees
      summary: "Migrate a tree's Gramps database to a new schema."
      operationId: migrateTree
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: Successful operation."
        202:
          description: "Accepted: task will be run in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        422:
          description: "Invalid: malformed tree ID."

  /trees/{tree_id}/repair:
    parameters:
      - name: tree_id
        in: path
        required: true
        type: string
        description: "The tree ID."
    post:
      tags:
      - trees
      summary: "Check & repair a tree's Gramps database."
      operationId: repairTree
      security:
        - Bearer: []
      responses:
        201:
          description: "OK: Successful operation."
        202:
          description: "Accepted: task will be run in the background."
          schema:
            type: object
            properties:
              task:
                $ref: "#/definitions/TaskReference"
        401:
          description: "Unauthorized: Missing authorization header."
        403:
          description: "Unauthorized: insufficient permissions."
        422:
          description: "Invalid: malformed tree ID."



##############################################################################
# Model definitions
##############################################################################

definitions:

##############################################################################
# Model - Token
##############################################################################

  JWTAccessTokens:
    type: object
    properties:
      access_token:
        description: Access token
        type: string
      refresh_token:
        description: Refresh token
        type: string

  JWTRefreshToken:
    type: object
    properties:
      refresh_token:
        description: Refresh token
        type: string

  JWTAccessToken:
    type: object
    properties:
      access_token:
        description: Access token
        type: string

##############################################################################
# Model - Date
##############################################################################

  Date:
    type: object
    properties:
      calendar:
        description: "The calendar format for the date."
        type: integer
        example: 0
      dateval:
        description: "The value for the date. A mixed array of integer and boolean types."
        type: array
        items:
          type: object
        example:
        - 1
        - 4
        - 1875
        - false
      format:
        description: "TODO: Is this part of the JSON schema?"
        type: string
        example: null
      modifier:
        description: "Modifier."
        type: integer
        example: 0
      newyear:
        description: "New year begins."
        type: integer
        example: 0
      quality:
        description: "Quality"
        type: integer
        example: 0
      sortval:
        description: "Value to use for date sorting."
        type: integer
        example: 2405980
      text:
        description: "Textual representation of the date."
        type: string
        example: ""
      year:
        description: "Year"
        type: integer
        example: 1875

##############################################################################
# Model - Name
##############################################################################

  Name:
    type: object
    properties:
      call:
        description: "Call name."
        type: string
        example: "Anderson"
      citation_list:
        description: "A list of handles for citations supporting the name."
        type: array
        items:
          type: string
        example:
          - "c140d56d19a1ced4c7a"
      date:
        description: "Date the name was in use."
        type: object
        items:
          $ref: "#/definitions/Date"
      display_as:
        description: "Identified for how to display the name."
        type: integer
        example: 0
      famnick:
        description: "Family nick name."
        type: string
        example: "Beauregard"
      first_name:
        description: "First part of name."
        type: string
        example: "Lewis Anderson"
      group_as:
        description: "For identifying how to group the name."
        type: string
        example: ""
      nick:
        description: "Nick name."
        type: string
        example: "Big Louie"
      note_list:
        description: "A list of handles for research notes about the name."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: true
      sort_as:
        description: "For identifying how to sort the name."
        type: integer
        example: 0
      suffix:
        description: "Suffix, usually denotes credentials."
        type: string
        example: "Sr"
      surname_list:
        description: "Surnames."
        type: array
        items:
          $ref: "#/definitions/Surname"
      title:
        description: "Prefix or title."
        type: string
        example: "Dr."
      type:
        description: "Type of name."
        type: string
        example: "Birth Name"

##############################################################################
# Model - Surname
##############################################################################

  Surname:
    type: object
    properties:
      connector:
        description: "Connector to tie given name and surname together."
        type: string
        example: ""
      origintype:
        description: "Name origin."
        type: string
        example: "Inherited"
      prefix:
        description: "A name prefix."
        type: string
        example: "von"
      primary:
        description: "Primary surname indicator."
        type: boolean
        example: false
      surname:
        description: "Actual surname."
        type: string
        example: "Zieliński"

##############################################################################
# Model - Attribute
##############################################################################

  Attribute:
    type: object
    properties:
      citation_list:
        description: "A list of handles for citations supporting the attribute."
        type: array
        items:
          type: string
        example:
          - "c140d5e5dbf300411bf"
      note_list:
        description: "A list of handles for research notes about the attribute."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: true
      type:
        description: "Type of the attribute."
        type: string
        example: "Social Security Number"
      value:
        description: "Value of the attribute."
        type: string
        example: "123-456-7890"

##############################################################################
# Model - Transaction
##############################################################################

  Transaction:
    type: object
    required:
      - type
      - handle
      - _class
      - old
      - new
    properties:
      type:
        description: "The type of action"
        type: string
        enum:
          - add
          - update
          - delete
      _class:
        description: "Object class name"
        type: string
        example: Person
      handle:
        description: "The unique identifier for the object."
        type: string
        maxLength: 50
        example: "GNUJQCL9MD64AM56OH"
      old:
        description: "The old object"
        type: object
      new:
        description: "The new object"
        type: object

##############################################################################
# Model - UndoTransaction
##############################################################################

  UndoTransaction:
    type: object
    required:
      - id
      - connection
      - description
      - first
      - last
      - undo
      - timstamp
      - changes
    properties:
      id:
        description: "The transaction ID"
        type: integer
      connection:
        description: "The connection object."
        type: object
      first:
        description: "ID of the first change."
        type: integer
      last:
        description: "ID of the last change."
        type: integer
      undo:
        description: "Whether the transaction is from an undo action."
        type: boolean
      timestamp:
        description: "The Unix timestamp when the transaction was committed."
        type: number
      changes:
        description: "The list of changes."
        type: array
        items:
          type: object


##############################################################################
# Model - Person
##############################################################################

  Person:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Person'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Person]
      address_list:
        description: "A list of addresses for the person if available."
        type: array
        items:
          $ref: "#/definitions/Address"
      alternate_names:
        description: "A list of all the known names used by the person."
        type: array
        items:
          $ref: "#/definitions/Name"
      attribute_list:
        description: "A list of attributes about the person."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      birth_ref_index:
        description: "Indicates if a birth event is assigned to the person."
        type: integer
        example: 0
      change:
        description: "Time in epoch format the person record was last modified."
        type: number
        example: 1431174904
      citation_list:
        description: "A list of handles for citations supporting the person."
        type: array
        items:
          type: string
        example:
          - "c140d25efc045ab2ea5"
          - "c140d25efe703834da4"
          - "c140d53ab8b377b4174"
      death_ref_index:
        description: "Indicates if a death event is assigned to the person."
        type: integer
        example: 1
      event_ref_list:
        description: "A list of references to events the person participated in."
        type: array
        items:
          $ref: "#/definitions/EventReference"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/PersonExtended"
      family_list:
        description: "A list of handles for the families the person was a parent of."
        type: array
        items:
          type: string
        example:
          - "9OUJQCBOHW9UEK9CNV"
      gender:
        description: "Sex of the person."
        type: integer
        example: 1
      gramps_id:
        description: "An alternate user managed identifier for the person, usually but not guaranteed to be unique."
        type: string
        example: "I0044"
      handle:
        description: "The unique identifier for a person."
        type: string
        maxLength: 50
        example: "GNUJQCL9MD64AM56OH"
      lds_ord_list:
        description: "A list of LDS specific events the person participated in."
        type: array
        items:
          $ref: "#/definitions/LDSOrdination"
      media_list:
        description: "A list of references to media associated with the person."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the person."
        type: array
        items:
          type: string
        example:
          - "ac380498c020c7bcdc7"
          - "b39ff01f75c1f76859a"
          - "b39ff11d8912173cded"
          - "c140d4c29520c92055c"
      parent_family_list:
        description: "A list of handles for the families of the parents of the person."
        type: array
        items:
          type: string
        example:
          - "8OUJQCUVZ0XML7BQLF"
      person_ref_list:
        description: "A list of references to relationships the person had with other people."
        type: array
        items:
          $ref: "#/definitions/PersonReference"
      primary_name:
        description: "The primary name of the person."
        type: object
        items:
          $ref: "#/definitions/Name"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of some key events about the person and their familial relationships."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/PersonProfile"
      tag_list:
        description: "A list of handles to tags associated with the person."
        type: array
        items:
          type: string
        example:
          - "e9027bf39c27be945fab9df8124"
      urls:
        description: "A list of URLs associated with the person."
        type: array
        items:
          $ref: "#/definitions/URL"

##############################################################################
# Model - PersonExtended
##############################################################################

  PersonExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      events:
        description: "The event records for any referenced events."
        type: array
        items:
          $ref: "#/definitions/Event"
      families:
        description: "The family records for any referenced families."
        type: array
        items:
          $ref: "#/definitions/Family"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      parent_families:
        description: "The family records for any referenced parent families."
        type: array
        items:
          $ref: "#/definitions/Family"
      people:
        description: "The person records for any referenced persons."
        type: array
        items:
          $ref: "#/definitions/Person"
      primary_parent_family:
        description: "The family record for the primary parent family if referenced."
        type: object
        items:
          $ref: "#/definitions/Family"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - PersonProfile
##############################################################################

  PersonProfile:
    type: object
    properties:
      birth:
        description: "The birth event profile, or best fallback such as baptism, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      death:
        description: "The death event profile, or best fallback such as burial, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      events:
        description: "The event profiles for all the referenced events for the person."
        type: array
        items:
          $ref: "#/definitions/EventProfile"
      families:
        description: "The family profiles for families the person was a parent of."
        type: array
        items:
          $ref: "#/definitions/FamilyProfile"
      gramps_id:
        description: "An alternate user managed identifier for the person, usually but not guaranteed to be unique."
        type: string
        example: "P0001"
      handle:
        description: "The unique identifier for a person."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      name_given:
        description: "Preferred given name of the person."
        type: string
        example: "Lewis Anderson"
      name_surname:
        description: "Preferred surname of the person."
        type: string
        example: "Garner von Zieliński"
      name_suffix:
        description: "Name suffix of the person."
        type: string
        example: "Sr"
      other_parent_families:
        description: "The family profiles for families of the parents of the person other than the primary parent family profile."
        type: array
        items:
          $ref: "#/definitions/FamilyProfile"
      primary_parent_family:
        description: "The family profile for the primary or preferred parents of the person."
        type: object
        items:
          $ref: "#/definitions/FamilyProfile"
      references:
        description: "References from other objects"
        type: object
        properties:
          person:
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
          family:
            type: array
            items:
              $ref: "#/definitions/FamilyProfile"
      sex:
        description: "Simple identified for gender/sex of the person."
        type: string
        example: "M"

##############################################################################
# Model - PersonReference
##############################################################################

  PersonReference:
    type: object
    required:
      - ref
    properties:
      citation_list:
        description: "A list of handles for citations supporting the association."
        type: array
        items:
          type: string
        example:
          - "c140d694e647717b683"
      note_list:
        description: "A list of handles for research notes about the association."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the person referenced."
        type: string
        example: "VJFKQCFO7WESWPNKHE"
      rel:
        description: "The relationship between the two people."
        type: string
        example: "Godfather"

##############################################################################
# Model - Family
##############################################################################

  Family:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Family'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Family]
      attribute_list:
        description: "A list of attributes about the family."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the family record was last modified."
        type: number
        example: 1328026883
      child_ref_list:
        description: "A list of references to children who were members of the family."
        type: array
        items:
          $ref: "#/definitions/ChildReference"
      citation_list:
        description: "A list of handles for citations supporting the family."
        type: array
        items:
          type: string
        example:
          - "c140d2876657c5a98f3"
          - "c140d934eba1ac92c35"
      event_ref_list:
        description: "A list of references to events the family participated in."
        type: array
        items:
          $ref: "#/definitions/EventReference"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/FamilyExtended"
      father_handle:
        description: "The unique identifier for the father of the family."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      gramps_id:
        description: "An alternate user managed identifier for the family, usually but not guaranteed to be unique."
        type: string
        example: "F0017"
      handle:
        description: "The unique identifier for a family."
        type: string
        maxLength: 50
        example: "9OUJQCBOHW9UEK9CNV"
      lds_ord_list:
        description: "A list of LDS specific events the family participated in."
        type: array
        items:
          $ref: "#/definitions/LDSOrdination"
      media_list:
        description: "A list of references to media associated with the family."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      mother_handle:
        description: "The unique identifier for the mother of the family."
        type: string
        example: "FOUJQC7PMC15VC4P0I"
      note_list:
        description: "A list of handles for research notes related to the person."
        type: array
        items:
          type: string
        example:
          - "ac3804a1d747a39822c"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of the members of a family as well as some key events."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/FamilyProfile"
      tag_list:
        description: "A list of handles to tags associated with the family."
        type: array
        items:
          type: string
        example:
          - "bb80c2b235b0a1b3f49"
      type:
        description: "The type of relationship between the parents of family."
        type: string
        example: "Married"

##############################################################################
# Model - FamilyExtended
##############################################################################

  FamilyExtended:
    type: object
    properties:
      children:
        description: "The person records for any referenced children."
        type: array
        items:
          $ref: "#/definitions/Person"
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      events:
        description: "The event records for any referenced events."
        type: array
        items:
          $ref: "#/definitions/Event"
      father:
        description: "The person record for the father if known."
        type: object
        items:
          $ref: "#/definitions/Person"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      mother:
        description: "The person record for the mother if known."
        type: object
        items:
          $ref: "#/definitions/Person"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - FamilyProfile
##############################################################################

  FamilyProfile:
    type: object
    properties:
      children:
        description: "The person profiles for any children in the family."
        type: array
        items:
          $ref: "#/definitions/PersonProfile"
      divorce:
        description: "The divorce event profile, or best fallback such as annulment, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      events:
        description: "The event profiles for all the referenced events for the family."
        type: array
        items:
          $ref: "#/definitions/EventProfile"
      family_surname:
        description: "The surname of the father, or if none present, the mother in the family."
        type: string
        example: "Garner von Zieliński"
      father:
        description: "The person profile for the father of the family."
        type: object
        items:
          $ref: "#/definitions/PersonProfile"
      gramps_id:
        description: "An alternate user managed identifier for the family, usually but not guaranteed to be unique."
        type: string
        example: "F0001"
      handle:
        description: "The unique identifier for a family."
        type: string
        example: "9OUJQCBOHW9UEK9CNV"
      marriage:
        description: "The marriage event profile, or best fallback such as marriage license, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      mother:
        description: "The person profile for the mother of the family."
        type: object
        items:
          $ref: "#/definitions/PersonProfile"
      references:
        description: "References from other objects"
        type: object
        properties:
          person:
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
      relationship:
        description: "The relationship between the parents of the family."
        type: string
        example: "Married"

##############################################################################
# Model - ChildReference
##############################################################################

  ChildReference:
    type: object
    required:
      - ref
    properties:
      citation_list:
        description: "A list of handles for citations supporting the reference to the child in the family."
        type: array
        items:
          type: string
        example:
          - "e9027bf39c36d6cdd046748852e"
      frel:
        description: "Relationship between the child and father."
        type: string
        example: "Birth"
      mrel:
        description: "Relationship between the child and mother."
        type: string
        example: "Birth"
      note_list:
        description: "A list of handles for research notes about the membership of the child in the family."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the child referenced."
        type: string
        example: "DPUJQCUYKKDPT78JJV"

##############################################################################
# Model - Event
##############################################################################

  Event:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Event'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Event]
      attribute_list:
        description: "A list of attributes about the event."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the event record was last modified."
        type: number
        example: 1284030610
      citation_list:
        description: "A list of handles for citations supporting the event."
        type: array
        items:
          type: string
        example:
          - ""
      date:
        description: "The date of the event."
        type: object
        items:
          $ref: "#/definitions/Date"
      description:
        description: "A description for the event."
        type: string
        example: "Burial of Garner, Lewis Anderson"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/EventExtended"
      gramps_id:
        description: "An alternate user managed identifier for the event, usually but not guaranteed to be unique."
        type: string
        example: "E01658"
      handle:
        description: "The unique identifier for an event."
        type: string
        maxLength: 50
        example: "a5af0ecb12e29af8a5d"
      media_list:
        description: "A list of references to media associated with the event."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the event."
        type: array
        items:
          type: string
        example:
          - ""
      place:
        description: "The handle to the place record for where the event occurred."
        type: string
        example: "YNUJQC8YM5EGRG868J"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of the key attributes for the event."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/EventProfile"
      tag_list:
        description: "A list of handles to tags associated with the event."
        type: array
        items:
          type: string
        example:
          - ""
      type:
        description: "The type of event."
        type: string
        example: "Burial"

##############################################################################
# Model - EventExtended
##############################################################################

  EventExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      place:
        description: "The place record if a place was referenced."
        type: object
        items:
          $ref: "#/definitions/Place"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - EventProfile
##############################################################################

  EventProfile:
    type: object
    properties:
      citations:
        description: "Total citations supporting the event."
        type: integer
        example: 2
      confidence:
        description: "Highest confidence rating among the supporting citations."
        type: integer
        example: 3
      date:
        description: "Date of the event."
        type: string
        example: "1855-06-21"
      place:
        description: "Place of the event."
        type: string
        example: "Great Falls, MT, USA"
      type:
        description: "Type of the event."
        type: string
        example: "Birth"
      participants:
        description: "People or families participating in the event."
        type: object
        properties:
          people:
            description: "People participating in the event."
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
          families:
            description: "Families participating in the event."
            type: array
            items:
              $ref: "#/definitions/FamilyProfile"
      references:
        description: "References from other objects"
        type: object
        properties:
          person:
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
          family:
            type: array
            items:
              $ref: "#/definitions/FamilyProfile"


##############################################################################
# Model - EventReference
##############################################################################

  EventReference:
    type: object
    required:
      - ref
    properties:
      attribute_list:
        description: "A list of attributes related to the role of the person in the event."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      note_list:
        description: "A list of handles for research notes about the event."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the event referenced."
        type: string
        example: "a5af0ecb12e29af8a5d"
      role:
        description: "Role of the person in the event."
        type: string
        example: "Primary"

##############################################################################
# Model - LDSOrdination
##############################################################################

  LDSOrdination:
    type: object
    properties:
      citation_list:
        description: "A list of handles for citations supporting the LDS event."
        type: array
        items:
          type: string
        example:
          - "c140d73a2ca52f37800"
      date:
        description: "Date of the event."
        type: object
        items:
          $ref: "#/definitions/Date"
      famc:
        description: "Family."
        type: string
        example: "8OUJQCUVZ0XML7BQLF"
      note_list:
        description: "A list of handles for research notes about the LDS event."
        type: array
        items:
          type: string
        example:
          - ""
      place:
        description: "Handle to location of the event."
        type: string
        example: "WTAKQCGG8L8LYZCSBB"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      status:
        description: "Status of the event."
        type: integer
        example: 13
      temple:
        description: "Temple the event was held at."
        type: string
        example: "ADELA"
      type:
        description: "Type of the event."
        type: integer
        example: 2

##############################################################################
# Model - Place
##############################################################################

  Place:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Place'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Place]
      alt_loc:
        description: "Alternate locations for the place."
        type: array
        items:
          $ref: "#/definitions/Location"
      alt_names:
        description: "Alternate names for the place."
        type: array
        items:
          $ref: "#/definitions/PlaceName"
      change:
        description: "Time in epoch format the event place was last modified."
        type: number
        example: 1328027392
      citation_list:
        description: "A list of handles for citations supporting the place."
        type: array
        items:
          type: string
        example:
          - "c140df00ffa3ee017da"
      code:
        description: "Code."
        type: string
        example: ""
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/PlaceExtended"
      gramps_id:
        description: "An alternate user managed identifier for the place, usually but not guaranteed to be unique."
        type: string
        example: "P1678"
      handle:
        description: "The unique identifier for the place."
        type: string
        maxLength: 50
        example: "YNUJQC8YM5EGRG868J"
      lat:
        description: "Latitude."
        type: string
        example: "42.5629668"
      long:
        description: "Longitude."
        type: string
        example: "-114.4608711"
      media_list:
        description: "A list of references to media associated with the person."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      name:
        description: "The place name."
        type: object
        items:
          $ref: "#/definitions/PlaceName"
      note_list:
        description: "A list of handles for research notes related to the person."
        type: array
        items:
          type: string
        example:
          - ""
      place_type:
        description: "The place type."
        type: string
        example: "City"
      placeref_list:
        description: "A list of references to other places."
        type: array
        items:
          $ref: "#/definitions/PlaceReference"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of the parent places and geo coordinates."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/PlaceProfile"
      tag_list:
        description: "A list of handles to tags associated with the place."
        type: array
        items:
          type: string
        example:
          - ""
      title:
        description: "The full name of the place."
        type: string
        example: "Twin Falls, ID"
      urls:
        description: "A list of URLs associated with the place."
        type: array
        items:
          $ref: "#/definitions/URL"

##############################################################################
# Model - PlaceExtended
##############################################################################

  PlaceExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - PlaceName
##############################################################################

  PlaceName:
    type: object
    properties:
      date:
        description: "Date the place name was in use."
        type: object
        items:
          $ref: "#/definitions/Date"
      lang:
        description: "Language the name is in."
        type: string
        example: ""
      value:
        description: "The name in use."
        type: string
        example: "Twin Falls"

##############################################################################
# Model - PlaceReference
##############################################################################

  PlaceReference:
    type: object
    required:
      - ref
    properties:
      date:
        description: "Date of the reference."
        type: object
        items:
          $ref: "#/definitions/Date"
      ref:
        description: "Handle of the referenced place."
        type: string
        example: "c965872719e5db6bfe5fc47b033"

##############################################################################
# Model - PlaceProfile
##############################################################################

  PlaceProfile:
    type: object
    properties:
      alternate_names:
        description: "Alternative names of the place."
        type: array
        items:
          type: string
        example:
          - "Gainesville, FA"
      gramps_id:
        description: "The place's Gramps ID."
        type: string
        example: P0001
      lat:
        description: "The geographic latitude as a float."
        type: number
        example: 33.6259414
      long:
        description: "The geographic longitude as a float."
        type: number
        example: -97.1333453
      name:
        description: "The place title."
        type: string
        example: Gainesville
      parent_places:
        description: "A list of parent places."
        type: array
        items:
          $ref: "#/definitions/PlaceProfile"
      references:
        description: "References from other objects"
        type: object
        properties:
          person:
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
          event:
            type: array
            items:
              $ref: "#/definitions/EventProfile"
          place:
            type: array
            items:
              $ref: "#/definitions/PlaceProfile"

##############################################################################
# Model - Address
##############################################################################

  Address:
    type: object
    properties:
      citation_list:
        description: "A list of handles for citations supporting the address."
        type: array
        items:
          type: string
        example:
          - "c140d5aa362797c32d4"
      city:
        description: "City."
        type: string
        example: "Washington DC"
      country:
        description: "Country."
        type: string
        example: "USA"
      county:
        description: "County."
        type: string
        example: ""
      date:
        description: "Date resident at the address."
        type: object
        items:
          $ref: "#/definitions/Date"
      locality:
        description: "Locality."
        type: string
        example: ""
      note_list:
        description: "A list of handles for research notes about the address."
        type: array
        items:
          type: string
        example:
          - ""
      phone:
        description: "Phone number."
        type: string
        example: ""
      postal:
        description: "Postal code."
        type: string
        example: ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      state:
        description: "State."
        type: string
        example: "District of Columbia"
      street:
        description: "Street."
        type: string
        example: "1600 Pennsylvania Ave."

##############################################################################
# Model - Location
##############################################################################

  Location:
    type: object
    properties:
      city:
        description: "City."
        type: string
        example: "Washington DC"
      country:
        description: "Country."
        type: string
        example: "USA"
      county:
        description: "County."
        type: string
        example: ""
      locality:
        description: "Locality."
        type: string
        example: ""
      parish:
        description: "Parish."
        type: string
        example: ""
      phone:
        description: "Phone number."
        type: string
        example: ""
      postal:
        description: "Postal code."
        type: string
        example: ""
      state:
        description: "State."
        type: string
        example: "District of Columbia"
      street:
        description: "Street."
        type: string
        example: "1600 Pennsylvania Avenue"

##############################################################################
# Model - Citation
##############################################################################

  Citation:
    type: object
    required:
      - handle
      - source_handle
    properties:
      _class:
        description: "Object class name; must be 'Citation'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Citation]
      attribute_list:
        description: "A list of attributes about the citation."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the citation record was last modified."
        type: number
        example: 1328025946
      confidence:
        description: "Indicator of the confidence in the information being cited."
        type: integer
        example: 3
      date:
        description: "The date of the citation."
        type: object
        items:
          $ref: "#/definitions/Date"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/CitationExtended"
      gramps_id:
        description: "An alternate user managed identifier for the citation, usually but not guaranteed to be unique."
        type: string
        example: "C0975"
      handle:
        description: "The unique identifier for the citation."
        type: string
        maxLength: 50
        example: "c140d25efe703834da4"
      media_list:
        description: "A list of references to media associated with the citation."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the citation."
        type: array
        items:
          type: string
        example:
          - ""
      page:
        description: "The page in the source material being cited."
        type: string
        example: ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of the citation date and source information."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/CitationProfile"
      source_handle:
        description: "The handle to the source record being cited from."
        type: string
        example: "b39fe3f390e30bd2b99"
      tag_list:
        description: "A list of handles to tags associated with the citation."
        type: array
        items:
          type: string
        example:
          - ""

##############################################################################
# Model - CitationExtended
##############################################################################

  CitationExtended:
    type: object
    properties:
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      source:
        description: "The source record for the citation."
        type: object
        items:
          $ref: "#/definitions/Source"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - CitationProfile
##############################################################################

  CitationProfile:
    type: object
    properties:
      date:
        description: "Date of the citation."
        type: string
        example: "1990-03-05"
      page:
        description: "Page cited from."
        type: string
        example: "Page 11 2/3."
      gramps_id:
        description: "An alternate user managed identifier for the citation, usually but not guaranteed to be unique."
        type: string
        example: "C0973"
      source:
        type: object
        items:
          $ref: "#/definitions/SourceProfile"
      references:
        description: "References from other objects"
        type: object
        properties:
          person:
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
          family:
            type: array
            items:
              $ref: "#/definitions/FamilyProfile"
          event:
            type: array
            items:
              $ref: "#/definitions/EventProfile"
          media:
            type: array
            items:
              $ref: "#/definitions/MediaProfile"
          place:
            type: array
            items:
              $ref: "#/definitions/PlaceProfile"

##############################################################################
# Model - Source
##############################################################################

  Source:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Source'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Source]
      abbrev:
        description: "An abbreviated name for the source."
        type: string
        example: "BR-GFC 1850"
      attribute_list:
        description: "A list of attributes about the source."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      author:
        description: "The author of the source."
        type: string
        example: "Priests of Great Falls Church 1850 - 1867"
      change:
        description: "Time in epoch format the source record was last modified."
        type: number
        example: 1234371690
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/SourceExtended"
      gramps_id:
        description: "An alternate user managed identifier for the source, usually but not guaranteed to be unique."
        type: string
        example: "S0000"
      handle:
        description: "The unique identifier for the source."
        type: string
        maxLength: 50
        example: "b39fe3f390e30bd2b99"
      media_list:
        description: "A list of references to media associated with the source."
        type: array
        items:
          $ref: "#/definitions/MediaReference"
      note_list:
        description: "A list of handles for research notes related to the source."
        type: array
        items:
          type: string
        example:
          - "b39feb55e1173f4a699"
          - "b39fedb8a051544689c"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      pubinfo:
        description: "Publication information."
        type: string
        example: "Microfilm Public Library Great Falls"
      reporef_list:
        description: "A list of references to repositories the source can be found in."
        type: array
        items:
          $ref: "#/definitions/RepositoryReference"
      tag_list:
        description: "A list of handles to tags associated with the source."
        type: array
        items:
          type: string
        example:
          - ""
      title:
        description: "Title for the source."
        type: string
        example: "Baptize registry 1850 - 1867 Great Falls Church"

##############################################################################
# Model - SourceExtended
##############################################################################

  SourceExtended:
    type: object
    properties:
      media:
        description: "The media records for any referenced media objects."
        type: array
        items:
          $ref: "#/definitions/Media"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      repositories:
        description: "The repository records for any referenced repositories."
        type: array
        items:
          $ref: "#/definitions/Repository"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - SourceProfile
##############################################################################

  SourceProfile:
    type: object
    properties:
      author:
        description: "The author of the source."
        type: string
        example: "Priests of Great Falls Church 1850 - 1867"
      pubinfo:
        description: "Publication information."
        type: string
        example: "Microfilm Public Library Great Falls"
      title:
        description: "Title for the source."
        type: string
        example: "Baptize registry 1850 - 1867 Great Falls Church"
      gramps_id:
        description: "An alternate user managed identifier for the source, usually but not guaranteed to be unique."
        type: string
        example: "S0002"
      references:
        description: "References from other objects"
        type: object
        properties:
          citation:
            type: array
            items:
              $ref: "#/definitions/CitationProfile"

##############################################################################
# Model - Repository
##############################################################################

  Repository:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Repository'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Repository]
      address_list:
        description: "A list of addresses for the repository if available."
        type: array
        items:
          $ref: "#/definitions/Address"
      change:
        description: "Time in epoch format the repository record was last modified."
        type: number
        example: 1234370614
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/RepositoryExtended"
      gramps_id:
        description: "An alternate user managed identifier for the repository, usually but not guaranteed to be unique."
        type: string
        example: "R0000"
      handle:
        description: "The unique identifier for the repository."
        type: string
        maxLength: 50
        example: "b39fe38593f3f8c4f12"
      name:
        description: "Name of the repository."
        type: string
        example: "Public Library Great Falls"
      note_list:
        description: "A list of handles for research notes related to the repository."
        type: array
        items:
          type: string
        example:
          - "b39fe2e143d1e599450"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      tag_list:
        description: "A list of handles to tags associated with the repository."
        type: array
        items:
          type: string
        example:
          - ""
      type:
        description: "The type of repository."
        type: string
        example: "Library"
      urls:
        description: "A list of URLs associated with the repository."
        type: array
        items:
          $ref: "#/definitions/URL"

##############################################################################
# Model - RepositoryExtended
##############################################################################

  RepositoryExtended:
    type: object
    properties:
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - RepositoryReference
##############################################################################

  RepositoryReference:
    type: object
    required:
      - ref
    properties:
      call_number:
        description: "Call number for the source at the repository."
        type: string
        example: "32Z-345"
      media_type:
        description: "The media source format at the repository."
        type: string
        example: "Microfilm"
      note_list:
        description: "A list of handles for research notes related to the source at the repository."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      ref:
        description: "The handle of the repository referenced."
        type: string
        example: "b39fe38593f3f8c4f12"

##############################################################################
# Model - Media
##############################################################################

  Media:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Media'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Media]
      attribute_list:
        description: "A list of attributes about the media object."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      change:
        description: "Time in epoch format the media object record was last modified."
        type: number
        example: 1328027158
      checksum:
        description: "A checksum for the media object for integrity validation."
        type: string
        example: "542c7ed6f97c6af16907339439abffdf"
      citation_list:
        description: "A list of handles for citations supporting the media object."
        type: array
        items:
          type: string
        example:
          - "c140dd5edc11679f39b"
      date:
        description: "The date associated with the media object."
        type: object
        items:
          $ref: "#/definitions/Date"
      desc:
        description: "A description of the contents of the media object."
        type: string
        example: "654px-Aksel_Andersson"
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/MediaExtended"
      gramps_id:
        description: "An alternate user managed identifier for the media object, usually but not guaranteed to be unique."
        type: string
        example: "O0008"
      handle:
        description: "The unique identifier for the media object."
        type: string
        maxLength: 50
        example: "B1AUFQV7H8R9NR4SZM"
      mime:
        description: "The format of the media object."
        type: string
        example: "image/jpeg"
      note_list:
        description: "A list of handles for research notes related to the media object."
        type: array
        items:
          type: string
        example:
          - ""
      path:
        description: "The path to locate and load the media object from storage."
        type: string
        example: "654px-Aksel_Andersson.jpg"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      profile:
        description: "An optional summary of media information."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/MediaProfile"
      tag_list:
        description: "A list of handles to tags associated with the media object."
        type: array
        items:
          type: string
        example:
          - ""

##############################################################################
# Model - MediaExtended
##############################################################################

  MediaExtended:
    type: object
    properties:
      citations:
        description: "The citation records for any referenced citations."
        type: array
        items:
          $ref: "#/definitions/Citation"
      notes:
        description: "The note records for any referenced notes."
        type: array
        items:
          $ref: "#/definitions/Note"
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - MediaReference
##############################################################################

  MediaReference:
    type: object
    required:
      - ref
    properties:
      attribute_list:
        description: "A list of attributes related to the media reference."
        type: array
        items:
          $ref: "#/definitions/Attribute"
      citation_list:
        description: "A list of handles for citations supporting the media reference."
        type: array
        items:
          type: string
        example:
          - "c140d6cb9fe7fc1d3cc"
      note_list:
        description: "A list of handles for research notes about the media reference."
        type: array
        items:
          type: string
        example:
          - ""
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      rect:
        description: "Rectangle."
        type: array
        items:
          type: number
        example: [10, 20, 30, 40]
      ref:
        description: "The handle of the media referenced."
        type: string
        example: "B1AUFQV7H8R9NR4SZM"

##############################################################################
# Model - MediaProfile
##############################################################################

  MediaProfile:
    type: object
    properties:
      date:
        description: "Date of media."
        type: string
        example: "1897"
      gramps_id:
        description: "An alternate user managed identifier for the media, usually but not guaranteed to be unique."
        type: string
        example: "O0010"
      references:
        description: "References from other objects"
        type: object
        properties:
          person:
            type: array
            items:
              $ref: "#/definitions/PersonProfile"
          family:
            type: array
            items:
              $ref: "#/definitions/FamilyProfile"
          event:
            type: array
            items:
              $ref: "#/definitions/EventProfile"
          media:
            type: array
            items:
              $ref: "#/definitions/MediaProfile"
          citation:
            type: array
            items:
              $ref: "#/definitions/CitationProfile"
          place:
            type: array
            items:
              $ref: "#/definitions/PlaceProfile"

##############################################################################
# Model - Note
##############################################################################

  Note:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Note'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Note]
      change:
        description: "Time in epoch format the note record was last modified."
        type: number
        example: 1234371685
      backlinks:
        description: "A mapping with lists of objects referring to the object, grouped by object type"
        type: object
        items:
          $ref: "#/definitions/Backlinks"
      extended:
        description: "An optional extended data section with the attributes for the referenced handles elsewhere in the response."
        type: object
        readOnly: true
        items:
          $ref: "#/definitions/NoteExtended"
      format:
        description: "Identifier for the note format."
        type: integer
        example: 1
      gramps_id:
        description: "An alternate user managed identifier for the note, usually but not guaranteed to be unique."
        type: string
        example: "N0010"
      handle:
        description: "The unique identifier for the note."
        type: string
        maxLength: 50
        example: "b39feb55e1173f4a699"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      tag_list:
        description: "A list of handles to tags associated with the note."
        type: array
        items:
          type: string
        example:
          - ""
      text:
        description: "The note text."
        type: object
        items:
          $ref: "#/definitions/StyledText"
      type:
        description: "The type of note."
        type: string
        example: "Source text"

##############################################################################
# Model - NoteExtended
##############################################################################

  NoteExtended:
    type: object
    properties:
      tags:
        description: "The tag records for any referenced tags."
        type: array
        items:
          $ref: "#/definitions/Tag"
      backlinks:
        description: "The object records referring to the object"
        type: object
        items:
          $ref: "#/definitions/BacklinksExtended"

##############################################################################
# Model - StyledText
##############################################################################

  StyledText:
    type: object
    properties:
      string:
        description: "The text itself."
        type: string
        example: "1855-06-25\n\n    line 1    fac secunda Junij Baptiza- \n    line 2    tus est Lewis Anderson\n    line 3    filius legitimus Guillielmus \n    line 4    Garner et Elisabetha  \n    line 5    Becks. Susceptores fuerent \n    line 6    petrus Arts et Catharina \n    line 7    van de Voorde"
      tags:
        description: "The text tags."
        type: array
        items:
          $ref: "#/definitions/StyledTextTag"

##############################################################################
# Model - StyledTextTag
##############################################################################

  StyledTextTag:
    type: object
    properties:
      name:
        description: "Name of the tag."
        type: string
        example: "Bold"
      value:
        description: "Value of the tag. Note type may be null, string, or integer."
        type: object
        example: "null"
      ranges:
        description: "Ranges."
        type: array
        items:
          type: integer
        example:
        - 0
        - 10

##############################################################################
# Model - Tag
##############################################################################

  Tag:
    type: object
    required:
      - handle
    properties:
      _class:
        description: "Object class name; must be 'Tag'. Compulsory for /objects/ endpoint."
        type: string
        enum: [Tag]
      change:
        description: "Time in epoch format the tag record was last modified."
        type: number
        example: 1288512442
      color:
        description: "Color of the tag."
        type: string
        example: "#efb60c280c28"
      handle:
        description: "The unique identifier for the tag."
        type: string
        maxLength: 50
        example: "bb80c2b235b0a1b3f49"
      name:
        description: "Tag name."
        type: string
        example: "ToDo"
      priority:
        description: "Priority of the tag."
        type: integer
        example: 0

##############################################################################
# Model - URL
##############################################################################

  URL:
    type: object
    properties:
      desc:
        description: "Description of the URL."
        type: string
        example: ""
      path:
        description: "URL"
        type: string
        example: "http://www.gramps-project.org/"
      private:
        description: "Private object indicator."
        type: boolean
        example: false
      type:
        description: "Type of URL."
        type: string
        example: "Web Home"

##############################################################################
# Model - FilterRuleDescription
##############################################################################

  FilterRuleDescription:
    type: object
    required:
       - labels
       - name
       - rule
    properties:
      category:
        description: "The filter rule category."
        type: string
        example: "General filters"
      description:
        description: "A description of the filter rule."
        type: string
        example: "Matches people with the particular tag"
      labels:
        description: "A list of field labels for filter rules that take parameters."
        type: array
        items:
          type: string
        example:
          - "Tag:"
      name:
        description: "A more concise rule description."
        type: string
        example: "People with the <tag>"
      rule:
        description: "The name of the filter rule."
        type: string
        example: "HasTag"

##############################################################################
# Model - FilterRule
##############################################################################

  FilterRule:
    type: object
    required:
      - name
    properties:
      name:
        description: "The name of the filter rule."
        type: string
        example: "HasTag"
      regex:
        description: "Indicator whether regular expressions used for text searches."
        type: boolean
        example: false
      values:
        description: "A list of values if the rule requires parameters."
        type: array
        items:
          type: object
        example:
          - "Tag:"

##############################################################################
# Model - CustomFilter
##############################################################################

  CustomFilter:
    type: object
    required:
      - function
      - invert
      - name
      - rules
    properties:
      comment:
        description: "A comment about purpose of the filter."
        type: string
        example: "All private males."
      function:
        description: "Logical operation to use in evaluating multiple rules. Must be 'and', 'or', 'xor' or 'one'"
        type: string
        example: "and"
      invert:
        description: "Indicator whether result set should be inverted."
        type: boolean
        example: false
      name:
        description: "The name of the custom filter."
        type: string
        example: "AllPrivateMales"
      rules:
        description: "The list of filter rules to apply as part of the filter."
        type: array
        items:
          $ref: "#/definitions/FilterRule"

##############################################################################
# Model - NamespaceFilters
##############################################################################

  NamespaceFilters:
    type: object
    properties:
      filters:
        type: array
        items:
          $ref: "#/definitions/CustomFilter"
      rules:
        type: array
        items:
          $ref: "#/definitions/FilterRuleDescription"

##############################################################################
# Model - Translations
##############################################################################

  Language:
    type: object
    properties:
      current:
        description: "The language name in the current locale."
        type: string
        example: "Bulgarisch"
      default:
        description: "The language name in the default locale."
        type: string
        example: "Bulgarian"
      language:
        description: "The language code."
        type: string
        example: "bg"
      native:
        description: "The language name in the native locale of the language."
        type: string
        example: "Български"

##############################################################################
# Model - Translation
##############################################################################

  Translation:
    type: object
    properties:
      original:
        description: "The original string."
        type: string
        example: "death"
      translation:
        description: "The translated string."
        type: string
        example: "décès"

##############################################################################
# Model - Relationship
##############################################################################

  Relationship:
    type: object
    properties:
      relationship_string:
        description: "Descriptive string describing the relationship."
        type: string
        example: "second great stepgrandaunt"
      distance_common_origin:
        description: "Number of generations to common ancestor, -1 if no common ancestor."
        type: integer
        example: 5
      distance_common_other:
        description: "Number of generations to other person in common, -1 if there is none."
        type: integer
        example: 1

  Relationships:
    type: array
    items:
      type: object
      properties:
        relationship_string:
          description: "Descriptive string describing the relationship."
          type: string
          example: "second great stepgrandaunt"
        common_ancestors:
          description: "List of handles of common ancestors."
          type: array
          items:
            type: string
          example:
          - 35WJQC1B7T7NPV8OLV
          - 46WJQCIOLQ0KOX2XCC

##############################################################################
# Model - Metadata
##############################################################################

  Metadata:
    type: object
    properties:
      database:
        description: "Information about the currently active database."
        type: object
        properties:
          id:
            description: "The database id."
            type: string
            example: "5f850009"
          module:
            description: "The database module version."
            type: string
            example: "2.6.0"
          name:
            description: "The database and also tree name."
            type: string
            example: "example_gramps"
          schema:
            description: "The data model schema version."
            type: string
            example: "18.0.0"
          type:
            description: "The database type."
            type: string
            example: "SQLite"
          version:
            description: "The database version."
            type: string
            example: "3.33.0"
      default_person:
        description: "The handle for the default person in the active database."
        type: string
        example: "GNUJQCL9MD64AM56OH"
      gramps:
        description: "Information about the currently active Gramps instance."
        type: object
        properties:
          version:
            description: "The version of the Gramps code."
            type: string
            example: "5.1.3"
      gramps_webapi:
        description: "Information about the currently active Gramps Web API instance."
        type: object
        properties:
          schema:
            description: "The version of the Gramps Web API schema."
            type: string
            example: "0.1.0"
          version:
            description: "The version of the Gramps Web API code."
            type: string
            example: "0.1-dev"
      gramps_ql:
        description: "Information about the installed Gramps QL library."
        type: object
        properties:
          version:
            description: "The version of the Gramps QL library."
            type: string
            example: "0.3.0"
      object_ql:
        description: "Information about the installed Object QL library."
        type: object
        properties:
          version:
            description: "The version of the Object QL library."
            type: string
            example: "0.1.1"
      locale:
        description: "The active locale."
        type: object
        properties:
          description:
            description: "The language description."
            type: string
            example: "English (USA)"
          incomplete_translation:
            description: "Indicates whether less than 70% of the language is currently translated."
            type: boolean
            example: false
          language:
            description: "The language code."
            type: string
            example: "en"
          lang:
            description: "The effective language locale."
            type: string
            example: "en_US"
      object_counts:
        $ref: "#/definitions/ObjectCounts"
      researcher:
        $ref: "#/definitions/Researcher"
      search:
        description: "Information about libraries related to searching."
        type: object
        properties:
          sifts:
            description: "Information about the Sifts library."
            type: object
            properties:
              version:
                description: "The Sifts version."
                type: string
                example: "0.7.0"
              count:
                description: "The total number of items in the search index."
                type: number
                example: 10570
      server:
        description: "Information about the server setup."
        type: object
        properties:
          multi_tree:
            description: "Indicates whether the server is enabled to host multiple family tree databases."
            type: boolean
            example: false
          task_queue:
            description: "Indicates whether the server is using a task queue for long running operations."
            type: boolean
            example: false
          ocr:
            description: "Indicates whether the server supports text recognition (OCR)."
            type: boolean
            example: false
          ocr_languages:
            description: "List of supported OCR languages (tesseract language codes)."
            type: array
            items:
              type: string
            example:
              - eng
              - deu
          semantic_search:
            description: "Indicates whether the server supports semantic search."
            type: boolean
            example: false
          chat:
            description: "Indicates whether the server supports AI chat."
            type: boolean
            example: false

      surnames:
        description: "A list of all surnames found in the database."
        type: array
        items:
          type: string
        example:
          - Abbott
          - Adams
          - Adkins

##############################################################################
# Model - ObjectCounts
##############################################################################

  ObjectCounts:
    description: "Total numbers for primary object types in the database."
    type: object
    properties:
      citations:
        description: "The number of citations in the database."
        type: number
        example: 2854
      events:
        description: "The number of events in the database."
        type: number
        example: 3432
      families:
        description: "The number of families in the database."
        type: number
        example: 762
      media:
        description: "The number of media items in the database."
        type: number
        example: 7
      notes:
        description: "The number of notes in the database."
        type: number
        example: 19
      people:
        description: "The number of people in the database."
        type: number
        example: 2157
      places:
        description: "The number of places in the database."
        type: number
        example: 1294
      repositories:
        description: "The number of repositories in the database."
        type: number
        example: 3
      sources:
        description: "The number of sources in the database."
        type: number
        example: 4
      tags:
        description: "The number of tags in the database."
        type: number
        example: 2

##############################################################################
# Model - Researcher
##############################################################################

  Researcher:
    description: "Information about the primary researcher of the data."
    type: object
    properties:
      addr:
        description: "Address."
        type: string
        example: ""
      city:
        description: "City."
        type: string
        example: ""
      country:
        description: "Country."
        type: string
        example: ""
      county:
        description: "County."
        type: string
        example: ""
      email:
        description: "Email address."
        type: string
        example: ""
      locality:
        description: "Locality."
        type: string
        example: ""
      name:
        description: "Name of the researcher."
        type: string
        example: ""
      phone:
        description: "Phone number."
        type: string
        example: ""
      postal:
        description: "Postal code."
        type: string
        example: ""
      state:
        description: "State."
        type: string
        example: ""
      street:
        description: "Street."
        type: string
        example: ""

##############################################################################
# Model - Bookmarks
##############################################################################

  Bookmarks:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
    example:
      families:
        - 9OUJQCBOHW9UEK9CNV
      people:
        - AWFKQCJELLUWDY2PD3
        - 35WJQC1B7T7NPV8OLV
        - Q8HKQC3VMRM1M6M7ES

##############################################################################
# Model - Countries
##############################################################################

  Countries:
    type: array
    items:
      type: string
    example:
      - "Bulgaria"
      - "Canada"
      - "Czech Republic"

##############################################################################
# Model - Holidays
##############################################################################

  Holidays:
    type: array
    items:
      type: string
    example:
      - "Christmas"

##############################################################################
# Model - NameFormat
##############################################################################

  NameFormat:
    type: object
    properties:
      active:
        description: "Indicate if format is in use."
        type: boolean
        example: true
      format:
        description: "The format string."
        type: string
        example: "SURNAME, given (common)"
      name:
        description: "The name of the format."
        type: string
        example: "SURNAME, Given (Common)"
      number:
        description: "Surname to be grouped."
        type: integer
        example: -1

##############################################################################
# Model - NameGroupMapping
##############################################################################

  NameGroupMapping:
    type: object
    properties:
      surname:
        description: "Surname to be grouped."
        type: string
        example: Fernández
      group:
        description: "Surname to be grouped with."
        type: string
        example: Fernandez


##############################################################################
# Model - Types
##############################################################################

  Types:
    type: object
    properties:
      custom:
        type: object
        $ref: "#/definitions/CustomTypes"
      default:
        type: object
        $ref: "#/definitions/DefaultTypes"

##############################################################################
# Model - DefaultTypes
##############################################################################

  DefaultTypes:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
    example:
      gender_types:
        - Male
        - Female
        - Unknown
      source_media_types:
        - Audio
        - Book
        - Card

##############################################################################
# Model - DefaultTypeMap
##############################################################################

  DefaultTypeMap:
    type: object
    additionalProperties:
      type: string
    example:
      0: Custom
      1: Audio
      2: Book
      3: Card

##############################################################################
# Model - CustomTypes
##############################################################################

  CustomTypes:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
    example:
      source_attribute_types:
        - Creation date
        - Book Cover Type
        - Generated by
      source_media_types:
        - Microfilm

##############################################################################
# Model - Span
##############################################################################

  Span:
    type: object
    properties:
      span:
        type: string
        description: "A description of a period of elapsed time."
        example: "82 years, 7 months, 28 days"

##############################################################################
# Model - Backlinks
##############################################################################

  Backlinks:
    type: object
    properties:
      person:
        description: "A list of handles of people referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      family:
        description: "A list of handles of families referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      event:
        description: "A list of handles of events referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      place:
        description: "A list of handles of places referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      source:
        description: "A list of handles of sources referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      citation:
        description: "A list of handles of citations referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"
      media:
        description: "A list of handles of media items referring to the object."
        type: array
        items:
          type: string
          example:
            - "c140d5e5dbf300411bf"


##############################################################################
# Model - Backlinks extended
##############################################################################

  BacklinksExtended:
    type: object
    properties:
      person:
        description: "A list of handles of people referring to the object."
        type: array
        items:
          $ref: "#/definitions/Person"
      family:
        description: "A list of handles of families referring to the object."
        type: array
        items:
          $ref: "#/definitions/Family"
      event:
        description: "A list of handles of events referring to the object."
        type: array
        items:
          $ref: "#/definitions/Event"
      place:
        description: "A list of handles of places referring to the object."
        type: array
        items:
          $ref: "#/definitions/Place"
      source:
        description: "A list of handles of sources referring to the object."
        type: array
        items:
          $ref: "#/definitions/Source"
      citation:
        description: "A list of handles of citations referring to the object."
        type: array
        items:
          $ref: "#/definitions/Citation"
      media:
        description: "A list of handles of media items referring to the object."
        type: array
        items:
          $ref: "#/definitions/Media"

##############################################################################
# Model - PasswordChange
##############################################################################

  PasswordChange:
    type: object
    required:
      - old_password
      - new_password
    properties:
      old_password:
        description: "The old password."
        type: string
        example: "abc123"
      new_password:
        description: "The new password."
        type: string
        example: "321cba"

##############################################################################
# Model - Credentials
##############################################################################

  Credentials:
    type: object
    required:
      - username
      - password
    properties:
      username:
        description: "The username."
        type: string
        example: "admin"
      password:
        description: "The password."
        type: string
        example: "nimda"

##############################################################################
# Model - Exporter
##############################################################################

  Exporter:
    type: object
    properties:
      description:
        description: "A description of the exporter."
        type: string
        example: "Gramps XML export is a complete archived XML backup of a Gramps family tree without the media object files. Suitable for backup purposes."
      extension:
        description: "The common file extension used for the given export format."
        type: string
        example: "gramps"
      module:
        description: "The module name of the exporter plugin."
        type: string
        example: "exportxml"


##############################################################################
# Model - Importer
##############################################################################

  Importer:
    type: object
    properties:
      description:
        description: "A description of the importer."
        type: string
        example: "The Gramps XML format is a text version of a Family Tree. It is read-write compatible with the present Gramps database format."
      extension:
        description: "The common file extension used for the given export format."
        type: string
        example: "gramps"
      module:
        description: "The module name of the exporter plugin."
        type: string
        example: "importxml"


##############################################################################
# Model - Report
##############################################################################

  Report:
    type: object
    properties:
      authors:
        description: "Report authors."
        type: array
        items:
          type: string
        example:
          - "Donald N. Allingham"
      authors_email:
        description: "Email addresses for report authors."
        type: array
        items:
          type: string
        example:
          - "don@gramps-project.org"
      category:
        description: "The report category."
        type: integer
        example: 0
      description:
        description: "A description of the report."
        type: string
        example: "Produces a textual ancestral report"
      id:
        description: "The report identifier."
        type: string
        example: "ancestor_report"
      name:
        description: "The name of the report."
        type: string
        example: "Ahnentafel Report"
      options_dict:
        description: "Dictionary containing all of the report options with their defaults."
        type: object
        additionalProperties: true
        example:
          papero: 0
      options_help:
        description: "Dictionary containing help information for all of the report options."
        type: object
        additionalProperties:
          $ref: "#/definitions/ReportHelpOption"
        example:
          papero:
            - "=number"
            - "Paper orientation number."
            -
              - "0\t"
              - "1\t"
      report_modes:
        description: "List of report modes."
        type: array
        items:
          type: integer
        example:
          - 1
          - 2
          - 4
      version:
        description: "The version number of the report."
        type: string
        example: "1.0"


##############################################################################
# Model - ReportHelpOption
##############################################################################

  ReportHelpOption:
    type: array
    items: {}
    example:
      - "=number"
      - "Paper orientation number."
      -
        - "0\t"
        - "1\t"


##############################################################################
# Model - SearchResult
##############################################################################

  SearchResult:
    type: object
    properties:
      handle:
        type: string
        example: "e9027bf39c27be945fab9df8124"
      object:
        type: object
      object_type:
        type: string
        example: person
      score:
        type: number
        example: 5.522300827719273

##############################################################################
# Model - ChatResponse
##############################################################################

  ChatResponse:
    type: object
    properties:
      response:
        type: string
        example: "I don't know."

##############################################################################
# Model - Living
##############################################################################

  Living:
    type: object
    properties:
      living:
        type: boolean
        example: true

##############################################################################
# Model - LivingDates
##############################################################################

  LivingDates:
    type: object
    properties:
      birth:
        description: "Birth date or estimated birth date."
        type: string
        example: "1999-04-01"
      death:
         description: "Death date or estimated death date."
         type: string
         example: "2179-04-11"
      explain:
         description: "Explanation indicating how dates were arrived at."
         type: string
         example: "birth date"
      other:
        $ref: "#/definitions/Person"

##############################################################################
# Model - TimelineEventProfile
##############################################################################

  TimelineEventProfile:
    type: object
    properties:
      age:
        description: >
          The age of the person at the time of the event. If the timeline is anchored, that is
          for a specific person, then it is their age at the time of the event. If the timeline
          is not anchored then it is the age of the person associated with that event at the
          time of the event.
        type: string
        example: "2 years"
      citations:
        description: "Total citations supporting the event."
        type: integer
        example: 2
      confidence:
        description: "Highest confidence rating among the supporting citations."
        type: integer
        example: 3
      date:
        description: "Date of the event."
        type: string
        example: "1857-05-30"
      description:
        description: "The event description."
        type: string
        example: "Birth of Garner, Rebecca Catharine"
      gramps_id:
        description: "An alternate user managed identifier for the event, usually but not guaranteed to be unique."
        type: string
        example: "E0200"
      handle:
        description: "The unique identifier for the event."
        type: string
        example: "a5af0eb8062495c6e0e"
      label:
        description: "A generated label for the event type that accounts for the relationship between the people."
        type: string
        example: "Birth of Stepsister"
      media:
        description: "A list of media item handles for the event."
        type: array
        items:
          type: string
        example:
          - ""
      person:
        $ref: "#/definitions/TimelinePersonProfile"
      place:
        $ref: "#/definitions/PlaceProfile"
      type:
        description: "Type of the event."
        type: string
        example: "Birth"


##############################################################################
# Model - DnaMatch
##############################################################################

  DnaMatch:
    type: object
    properties:
      handle:
        description: The handle of the matching person.
        type: string
        example: 9BXKQC1PVLPYFMD6IX
      relation:
        description: The relationship to the matching person
        type: string
        example: "first cousin"
      ancestor_handles:
        description: The handles of the latest common ancestors
        type: array
        items:
          type: string
          example: ORFKQC4KLWEGTGR19L
      ancestor_profiles:
        description: The profiles of the latest common ancestors
        type: array
        items:
          type: array
          items:
            $ref: "#/definitions/PersonProfile"
      segments:
        description: Details about each maching chromosome segment.
        type: array
        items:
          $ref: "#/definitions/DnaSegment"


##############################################################################
# Model - DnaSegment
##############################################################################

  DnaSegment:
    type: object
    properties:
      chromosome:
        description: The handle of the matching person.
        type: string
        example: "11"
      start:
        description: The starting number for the segment location.
        type: integer
        example: 56950055
      stop:
        description: The ending number for the segment location.
        type: integer
        example: 64247327
      side:
        description: Whether the match is one the maternal (M), paternal (P), or unkown (U) side.
        type: string
        example: P
      cM:
        description: The Genetic Distance (otherwise known as the number of centiMorgans) in the segment.
        type: number
        example: 10.9
      SNPs:
        description: Number of matching SNPs (Single Nucleotide Polymorphisms) in the segment.
        type: integer
        example: 1404
      comment:
        description: A comment about the segment
        type: string

##############################################################################
# Model - TimelinePersonProfile
##############################################################################

  TimelinePersonProfile:
    type: object
    properties:
      age:
        description: "The age of the person at the time of the event."
        type: string
        example: "2 years"
      birth:
        description: "The birth event profile, or best fallback such as baptism, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      death:
        description: "The death event profile, or best fallback such as burial, of the person."
        type: object
        items:
          $ref: "#/definitions/EventProfile"
      gramps_id:
        description: "An alternate user managed identifier for the person, usually but not guaranteed to be unique."
        type: string
        example: "I1117"
      handle:
        description: "The unique identifier for a person."
        type: string
        example: "ORFKQC4KLWEGTGR19L"
      name_given:
        description: "Preferred given name of the person."
        type: string
        example: "Rebecca Catharine"
      name_surname:
        description: "Preferred surname of the person."
        type: string
        example: "Garner"
      name_suffix:
        description: "Name suffix of the person."
        type: string
        example: "Sr"
      relationship:
        description: "The relationship the person has to the person for whom the timeline is for."
        type: string
        example: "stepsister"
      sex:
        description: "Simple identifier for gender/sex of the person."
        type: string
        example: "M"

##############################################################################
# Model - RecordFactEntry
##############################################################################

  RecordFact:
    type: object
    properties:
      description:
        description: "A description of the fact."
        type: string
        example: "Youngest living person"
      key:
        description: "A unique identifier for the fact."
        type: string
        example: "person_youngestliving"
      objects:
        description: "The list of objects the fact is about."
        type: array
        items:
          $ref: "#/definitions/RecordFactObject"

##############################################################################
# Model - RecordFactData
##############################################################################

  RecordFactObject:
    type: object
    properties:
      gramps_id:
        description: "The alternate user managed identifier for an object, usually but not guaranteed to be unique."
        type: string
        example: "I2044"
      handle:
        description: "The unique identifier for an object."
        type: string
        example: "9BXKQC1PVLPYFMD6IX"
      name:
        description: "A description of the object."
        type: string
        example: "Garner, Andrew Joseph"
      object:
        description: "The type of object."
        type: string
        example: "Person"
      value:
        description: "The object value supporting the fact."
        type: string
        example: "21 years, 8 months, 11 days"


##############################################################################
# Model - TaskReference
##############################################################################

  TaskReference:
    type: object
    properties:
      href:
        description: "The URL of the task detail endpoint."
        type: string
        example: "https://grampsweb.example.com/api/tasks/b9ed86ea-1c6b-400a-bb70-af9cb11bdf13"
      id:
        description: "The unique identifier for a task."
        type: string
        example: "b9ed86ea-1c6b-400a-bb70-af9cb11bdf13"

##############################################################################
# Model - Tree
##############################################################################

  Tree:
    type: object
    properties:
      name:
        description: "The name of the tree."
        type: string
        example: "Example Family"
      id:
        description: "The ID of the tree."
        type: string
        example: "b9ed86ea-1c6b-400a-bb70-af9cb11bdf13"
      quota_media:
        description: "The maxium size of media objects."
        type: integer
        example: 1000000
      quota_people:
        description: "The maxium number of people."
        type: integer
        example: 250
      usage_media:
        description: "The current size of media objects."
        type: integer
        example: 2048
      usage_people:
        description: "The current number of people."
        type: integer
        example: 96
      enabled:
        description: "Whether the tree is enabled."
        type: boolean
        example: true
      min_role_ai:
        description: "The minimum user role required to use the chat endpoint."
        type: integer
        example: 5
